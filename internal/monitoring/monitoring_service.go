package monitoring

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"log"
	"math"
	"net/http"
	"os"
	"time"
	"wbmonitoring/monitoring/internal/api"
	"wbmonitoring/monitoring/internal/config"
	"wbmonitoring/monitoring/internal/db"
	"wbmonitoring/monitoring/internal/models"
	"wbmonitoring/monitoring/internal/search"
	"wbmonitoring/monitoring/internal/telegram"

	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
	"golang.org/x/time/rate"
)

// MonitoringService struct
type MonitoringService struct {
	db               *sqlx.DB
	config           config.Config
	pricesLimiter    *rate.Limiter
	stocksLimiter    *rate.Limiter
	warehouseLimiter *rate.Limiter
	searchEngine     *search.SearchEngine
	httpClient       *http.Client
	telegramBot      *telegram.Bot
	recordCleanupSvc *RecordCleanupService
}

// NewMonitoringService creates a new MonitoringService.
func NewMonitoringService(cfg config.Config) (*MonitoringService, error) {
	database, err := sqlx.Connect("postgres", cfg.PGConnString)
	if err != nil {
		return nil, fmt.Errorf("connecting to database: %w", err)
	}

	telegramBot, err := telegram.NewBot(cfg.TelegramToken, cfg.TelegramChatID, database, cfg.AllowedUserIDs)
	if err != nil {
		return nil, fmt.Errorf("initializing telegram bot: %w", err)
	}

	searchConfig := search.SearchEngineConfig{ // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è SearchEngine
		WorkerCount:    cfg.WorkerCount,
		MaxRetries:     cfg.MaxRetries,
		RetryInterval:  cfg.RetryInterval,
		RequestTimeout: cfg.RequestTimeout,
		ApiKey:         cfg.ApiKey, // –ü–µ—Ä–µ–¥–∞–µ–º API –∫–ª—é—á
	}

	cleanupSvc := NewRecordCleanupService(
		database,
		24*time.Hour,    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
		30*24*time.Hour, // –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π
	)

	searchEngine := search.NewSearchEngine(database.DB, os.Stdout, searchConfig) // –ò—Å–ø–æ–ª—å–∑—É–µ–º db.DB, —Ç–∞–∫ –∫–∞–∫ SearchEngine –æ–∂–∏–¥–∞–µ—Ç *sql.DB
	client := http.Client{Timeout: cfg.RequestTimeout}
	return &MonitoringService{
		db:               database,
		config:           cfg,
		pricesLimiter:    rate.NewLimiter(rate.Every(time.Second*6/10), 1), // 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 6 —Å–µ–∫—É–Ω–¥
		stocksLimiter:    rate.NewLimiter(rate.Every(time.Minute/300), 10), // 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
		warehouseLimiter: rate.NewLimiter(rate.Every(time.Minute/300), 10), // 300 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
		telegramBot:      telegramBot,
		recordCleanupSvc: cleanupSvc,
		searchEngine:     searchEngine, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SearchEngine
		httpClient:       &client,
	}, nil
}

// RunProductUpdater –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
func (m *MonitoringService) RunProductUpdater(ctx context.Context) error {
	ticker := time.NewTicker(m.config.ProductUpdateInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case <-ticker.C:
			log.Println("Starting product update cycle")
			if err := m.UpdateProducts(ctx); err != nil {
				log.Printf("Error during product update: %v", err)
			} else {
				log.Println("Product update cycle completed successfully")
			}
		}
	}
}

// UpdateProducts –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è SearchEngine.
func (m *MonitoringService) UpdateProducts(ctx context.Context) error {
	nomenclatureChan := make(chan models.Nomenclature) // –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–µ–º–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä
	settings := models.Settings{
		Sort:   models.Sort{Ascending: false},
		Filter: models.Filter{WithPhoto: -1, TagIDs: []int{}, TextSearch: "", AllowedCategoriesOnly: true, ObjectIDs: []int{}, Brands: []string{}, ImtID: 0},
		Cursor: models.Cursor{Limit: 20000}}
	locale := ""

	go func() {
		err := m.searchEngine.GetNomenclaturesWithLimitConcurrentlyPutIntoChannel(ctx, settings, locale, nomenclatureChan)
		if err != nil {
			log.Printf("GetNomenclaturesWithLimitConcurrentlyPutIntoChannel failed: %v", err)
			close(nomenclatureChan) // Ensure channel is closed on error
		}
	}()

	for nomenclature := range nomenclatureChan {
		if err := m.ProcessNomenclature(ctx, nomenclature); err != nil {
			log.Printf("Error processing nomenclature %d: %v", nomenclature.NmID, err)
			return fmt.Errorf("processing nomenclature %d: %w", nomenclature.NmID, err) // Return error to stop update cycle
		}
	}

	return nil
}

// ProcessNomenclature –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ.
func (m *MonitoringService) ProcessNomenclature(ctx context.Context, nomenclature models.Nomenclature) error {
	barcode := ""
	if len(nomenclature.Sizes) > 0 && len(nomenclature.Sizes[0].Skus) > 0 {
		barcode = nomenclature.Sizes[0].Skus[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ä–∫–æ–¥ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –£—Ç–æ—á–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–Ω–∞—á–µ.
	}

	var existingProduct models.ProductRecord
	err := m.db.GetContext(ctx, &existingProduct, "SELECT id, nm_id FROM products WHERE nm_id = $1", nomenclature.NmID)
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		return fmt.Errorf("checking existing product: %w", err)
	}

	if errors.Is(err, sql.ErrNoRows) {
		// –ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
		_, err = m.db.ExecContext(ctx, `
			INSERT INTO products (nm_id, vendor_code, barcode, name, created_at)
			VALUES ($1, $2, $3, $4, NOW())
		`, nomenclature.NmID, nomenclature.VendorCode, barcode, nomenclature.Title)
		if err != nil {
			return fmt.Errorf("inserting new product: %w", err)
		}
	} else {
		// –ü—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, name, vendor_code, barcode - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
		_, err = m.db.ExecContext(ctx, `
			UPDATE products SET vendor_code = $2, barcode = $3, name = $4
			WHERE nm_id = $1
		`, nomenclature.NmID, nomenclature.VendorCode, barcode, nomenclature.Title)
		if err != nil {
			return fmt.Errorf("updating existing product: %w", err)
		}
	}

	return nil
}

// RunMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
func (m *MonitoringService) RunMonitoring(ctx context.Context) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := m.telegramBot.SendTelegramAlert("üîÑ –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω"); err != nil {
		log.Printf("Failed to send welcome message: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go m.telegramBot.StartBot(ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π
	go m.recordCleanupSvc.RunCleanupProcess(ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
	go m.RunProductUpdater(ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
	go m.runDailyReporting(ctx)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	ticker := time.NewTicker(m.config.MonitoringInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			if err := m.ProcessMonitoring(ctx); err != nil {
				log.Printf("Error during monitoring process: %v", err)
			}
		case <-ctx.Done():
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
			if err := m.telegramBot.SendTelegramAlert("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"); err != nil {
				log.Printf("Failed to send shutdown message: %v", err)
			}
			return ctx.Err()
		}
	}
}

// runDailyReporting –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
func (m *MonitoringService) runDailyReporting(ctx context.Context) {
	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (10:00 —É—Ç—Ä–∞)
	now := time.Now()
	nextRun := time.Date(now.Year(), now.Month(), now.Day(), 10, 0, 0, 0, now.Location())
	if now.After(nextRun) {
		nextRun = nextRun.Add(24 * time.Hour)
	}

	initialDelay := nextRun.Sub(now)
	log.Printf("Daily report scheduled at %s (in %s)", nextRun.Format("15:04:05"), initialDelay)

	// –ñ–¥–µ–º –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	timer := time.NewTimer(initialDelay)

	for {
		select {
		case <-timer.C:
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
			if err := m.telegramBot.SendDailyReport(ctx); err != nil {
				log.Printf("Error sending daily report: %v", err)
			}

			// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—É—Ç–∫–∏
			timer.Reset(24 * time.Hour)
		case <-ctx.Done():
			timer.Stop()
			return
		}
	}
}

func (m *MonitoringService) SendGreetings(ctx context.Context) error {
	log.Println("Sending greetings")
	seller, err := api.GetSellerInfo(ctx, *m.httpClient, m.config.ApiKey, rate.NewLimiter(rate.Every(1*time.Minute), 1))
	if err != nil {
		err = m.telegramBot.SendTelegramAlert("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å WB")
		if err != nil {
			return err
		}
		log.Fatalf("Error getting seller info: %v", err)
	}
	err = m.telegramBot.SendTelegramAlertWithParseMode(fmt.Sprintf("`%s`, —É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è WB", seller.Name), "Markdown")
	if err != nil {
		return err
	}
	return nil
}

// ProcessMonitoring –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
func (m *MonitoringService) ProcessMonitoring(ctx context.Context) error {
	log.Println("Starting monitoring cycle")

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è last_checked)
	products, err := m.GetAllProducts(ctx)
	if err != nil {
		return fmt.Errorf("failed to get products: %w", err)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
	if err := m.processStocks(ctx, products); err != nil {
		log.Printf("Error processing stocks: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–Ω—ã
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω —á–µ—Ä–µ–∑ API —Ü–µ–Ω –∏ —Å–∫–∏–¥–æ–∫
	if err := m.processPrices(ctx, products); err != nil {
		log.Printf("Error processing prices: %v", err)
	}

	log.Println("Monitoring cycle completed")
	return nil
}

// GetAllProducts retrieves all products from the database.
func (m *MonitoringService) GetAllProducts(ctx context.Context) ([]models.ProductRecord, error) {
	var products []models.ProductRecord
	query := `SELECT id, nm_id, vendor_code, barcode, name, created_at FROM products`

	if err := m.db.SelectContext(ctx, &products, query); err != nil {
		return nil, fmt.Errorf("fetching products from DB: %w", err)
	}

	return products, nil
}

// processStocks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤.
func (m *MonitoringService) processStocks(ctx context.Context, products []models.ProductRecord) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
	warehouses, err := m.GetWarehouses(ctx)
	if err != nil {
		return fmt.Errorf("failed to get warehouses: %w", err)
	}

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
	for _, warehouse := range warehouses {
		if err := m.processWarehouseStocks(ctx, warehouse, products); err != nil {
			log.Printf("Error processing warehouse %d: %v", warehouse.ID, err)
		}
	}

	return nil
}

// processWarehouseStocks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞.
func (m *MonitoringService) processWarehouseStocks(ctx context.Context, warehouse models.Warehouse, products []models.ProductRecord) error {
	// –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –ø–∞—Ä—Ç–∏–∏ –ø–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API)
	batchSize := 1000

	for i := 0; i < len(products); i += batchSize {
		end := i + batchSize
		if end > len(products) {
			end = len(products)
		}

		batch := products[i:end]

		// –°–æ–±–∏—Ä–∞–µ–º –±–∞—Ä–∫–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏
		var barcodes []string
		productMap := make(map[string]*models.ProductRecord)

		for j := range batch {
			product := &batch[j]
			barcodes = append(barcodes, product.Barcode)
			productMap[product.Barcode] = product
		}

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
		stockResp, err := m.GetStocks(ctx, warehouse.ID, barcodes)
		if err != nil {
			return fmt.Errorf("failed to get stocks for warehouse %d: %w", warehouse.ID, err)
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
		for _, stock := range stockResp.Stocks {
			product, ok := productMap[stock.Sku]
			if !ok {
				continue
			}

			newStock := &models.StockRecord{
				ProductID:   product.ID,
				WarehouseID: warehouse.ID,
				Amount:      stock.Amount,
				RecordedAt:  time.Now(),
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
			if err := m.CheckStockChanges(ctx, product, newStock); err != nil {
				log.Printf("Error checking stock changes for product %d: %v", product.ID, err)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
			if err := m.UpdateStockCheckStatus(ctx, product.ID); err != nil {
				log.Printf("Error updating stock check status for product %d: %v", product.ID, err)
			}
		}
	}

	return nil
}

// processPrices –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤.
func (m *MonitoringService) processPrices(ctx context.Context, products []models.ProductRecord) error {
	// –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º
	// API –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º—É–º 1000 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
	limit := 1000

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ nmID
	nmIDToProduct := make(map[int]*models.ProductRecord)
	var nmIDs []int

	for i := range products {
		product := &products[i]
		nmIDs = append(nmIDs, product.NmID)
		nmIDToProduct[product.NmID] = product
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
	offset := 0

	for {
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö —á–µ—Ä–µ–∑ API
		goodsResp, err := m.GetGoodsPrices(ctx, limit, offset, 0) // 0 - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ nmID
		if err != nil {
			return fmt.Errorf("failed to get goods prices: %w", err)
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
		if len(goodsResp.Data.ListGoods) == 0 {
			break
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
		for _, good := range goodsResp.Data.ListGoods {
			product, ok := nmIDToProduct[good.NmID]
			if !ok {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
			for _, size := range good.Sizes {
				if err := m.processPriceRecord(ctx, product, size); err != nil {
					log.Printf("Error processing price for nmID %d, sizeID %d: %v",
						good.NmID, size.SizeID, err)
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
			if err := m.UpdatePriceCheckStatus(ctx, product.ID); err != nil {
				log.Printf("Error updating price check status for product %d: %v", product.ID, err)
			}
		}

		// –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
		if len(goodsResp.Data.ListGoods) < limit {
			break
		}

		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		offset += limit
	}

	return nil
}

// processPriceRecord –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ü–µ–Ω–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞.
func (m *MonitoringService) processPriceRecord(ctx context.Context, product *models.ProductRecord, size models.GoodSize) error {
	// –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫
	finalPrice := size.DiscountedPrice
	clubPrice := size.ClubDiscountedPrice

	newPrice := &models.PriceRecord{
		ProductID:         product.ID,
		SizeID:            size.SizeID,
		Price:             size.Price,
		Discount:          size.Discount,
		ClubDiscount:      size.ClubDiscount,
		FinalPrice:        int(finalPrice),
		ClubFinalPrice:    int(clubPrice),
		CurrencyIsoCode:   size.CurrencyIsoCode4217,
		TechSizeName:      size.TechSizeName,
		EditableSizePrice: size.EditableSizePrice,
		RecordedAt:        time.Now(),
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
	if err := m.CheckPriceChanges(ctx, product, newPrice); err != nil {
		return fmt.Errorf("failed to check price changes: %w", err)
	}

	return nil
}

// CheckPriceChanges –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
func (m *MonitoringService) CheckPriceChanges(ctx context.Context, product *models.ProductRecord, newPrice *models.PriceRecord) error {
	lastPrice, err := m.GetLastPrice(ctx, product.ID)
	if err != nil {
		return fmt.Errorf("getting last price: %w", err)
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω—ã - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é
	if lastPrice == nil {
		err := m.SavePrice(ctx, newPrice)
		if err != nil {
			return fmt.Errorf("saving initial price: %w", err)
		}
		return nil
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
	priceDiff := float64(0)
	if lastPrice.FinalPrice > 0 {
		priceDiff = (float64(newPrice.FinalPrice-lastPrice.FinalPrice) / float64(lastPrice.FinalPrice)) * 100
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
	err = m.SavePrice(ctx, newPrice)
	if err != nil {
		return fmt.Errorf("saving price: %w", err)
	}

	// –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if priceDiff <= -m.config.PriceThreshold || priceDiff >= m.config.PriceThreshold {
		message := fmt.Sprintf(
			"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n"+
				"–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. `%s`)\n"+
				"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: %d —Ä—É–± (—Å–∫–∏–¥–∫–∞ %d%%)\n"+
				"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: %d —Ä—É–± (—Å–∫–∏–¥–∫–∞ %d%%)\n"+
				"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %.2f%%",
			product.Name, product.VendorCode,
			lastPrice.FinalPrice, lastPrice.Discount,
			newPrice.FinalPrice, newPrice.Discount,
			priceDiff,
		)

		if err := m.telegramBot.SendTelegramAlertWithParseMode(message, "Markdown"); err != nil {
			log.Printf("Failed to send Telegram alert about price change: %v", err)
		}
	}

	return nil
}

// CheckStockChanges –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
func (m *MonitoringService) CheckStockChanges(ctx context.Context, product *models.ProductRecord, newStock *models.StockRecord) error {
	lastStock, err := db.GetLastStock(ctx, m.db, product.ID, newStock.WarehouseID)
	if err != nil {
		return fmt.Errorf("getting last stock: %w", err)
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ
	if lastStock == nil {
		err := db.SaveStock(ctx, m.db, newStock)
		if err != nil {
			return fmt.Errorf("saving initial stock: %w", err)
		}
		return nil
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
	stockDiff := float64(0)
	if lastStock.Amount > 0 {
		stockDiff = math.Abs(float64(newStock.Amount-lastStock.Amount)) / float64(lastStock.Amount) * 100
	} else if newStock.Amount > 0 {
		stockDiff = 100 // –ü–æ—è–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
	err = db.SaveStock(ctx, m.db, newStock)
	if err != nil {
		return fmt.Errorf("saving stock: %w", err)
	}

	// –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if stockDiff <= -m.config.StockThreshold || stockDiff >= m.config.StockThreshold {
		message := fmt.Sprintf(
			"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤!\n"+
				"–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. `%s`)\n"+
				"–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d —à—Ç.\n"+
				"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d —à—Ç.\n"+
				"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %.2f%%",
			product.Name, product.VendorCode,
			lastStock.Amount,
			newStock.Amount,
			stockDiff,
		)

		if err := m.telegramBot.SendTelegramAlertWithParseMode(message, "Markdown"); err != nil {
			log.Printf("Failed to send Telegram alert about stock change: %v", err)
		}
	}

	return nil
}

// GetWarehouses retrieves warehouses from the API.
func (m *MonitoringService) GetWarehouses(ctx context.Context) ([]models.Warehouse, error) {
	return api.GetWarehouses(ctx, m.httpClient, m.config.ApiKey, m.warehouseLimiter)
}

// GetStocks retrieves stock information from the API.
func (m *MonitoringService) GetStocks(ctx context.Context, warehouseID int64, skus []string) (*models.StockResponse, error) {
	return api.GetStocks(ctx, m.httpClient, m.config.ApiKey, m.stocksLimiter, warehouseID, skus)
}

// GetPriceHistory retrieves price history from the API.
func (m *MonitoringService) GetPriceHistory(ctx context.Context, uploadID int, limit, offset int) (*models.PriceHistoryResponse, error) {
	return api.GetPriceHistory(ctx, m.httpClient, m.config.ApiKey, m.pricesLimiter, uploadID, limit, offset)
}

// GetGoodsPrices retrieves goods prices from the API.
func (m *MonitoringService) GetGoodsPrices(ctx context.Context, limit int, offset int, filterNmID int) (*models.GoodsPricesResponse, error) {
	return api.GetGoodsPrices(ctx, m.httpClient, m.config.ApiKey, m.pricesLimiter, limit, offset, filterNmID)
}

// GetLastPrice retrieves the last price record from the database.
func (m *MonitoringService) GetLastPrice(ctx context.Context, productID int) (*models.PriceRecord, error) {
	return db.GetLastPrice(ctx, m.db, productID)
}

// GetLastStock retrieves the last stock record from the database.
func (m *MonitoringService) GetLastStock(ctx context.Context, productID int, warehouseID int64) (*models.StockRecord, error) {
	return db.GetLastStock(ctx, m.db, productID, warehouseID)
}

// SavePrice saves a price record to the database.
func (m *MonitoringService) SavePrice(ctx context.Context, price *models.PriceRecord) error {
	return db.SavePrice(ctx, m.db, price)
}

// SaveStock saves a stock record to the database.
func (m *MonitoringService) SaveStock(ctx context.Context, stock *models.StockRecord) error {
	return db.SaveStock(ctx, m.db, stock)
}

// InitDB initializes the database schema.
func (m *MonitoringService) InitDB() error {
	return db.InitDB(m.db)
}

// GetProductCount retrieves the count of products in the database.
func (m *MonitoringService) GetProductCount(ctx context.Context) (int, error) {
	return db.GetProductCount(ctx, m.db)
}

// UpdatePriceCheckStatus updates the last price check status in the database.
func (m *MonitoringService) UpdatePriceCheckStatus(ctx context.Context, productID int) error {
	return db.UpdatePriceCheckStatus(ctx, m.db, productID)
}

// UpdateStockCheckStatus updates the last stock check status in the database.
func (m *MonitoringService) UpdateStockCheckStatus(ctx context.Context, productID int) error {
	return db.UpdateStockCheckStatus(ctx, m.db, productID)
}
