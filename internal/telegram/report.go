package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/xuri/excelize/v2"
	"log"
	"os"
	"path/filepath"
	"time"
	"wbmonitoring/monitoring/internal/db"
)

func (b *Bot) sendReportMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º", "report_prices"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", "report_stocks"),
		),
	)

	msg.ReplyMarkup = keyboard
	sentMsg, err := b.api.Send(msg)
	if err == nil {
		b.trackReportMessage(chatID, sentMsg.MessageID)
	}
}

func (b *Bot) generateReport(chatID int64, reportType, period, format string) {

	progressMsg := tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
	sentMsg, err := b.api.Send(progressMsg)
	if err == nil {
		b.trackReportMessage(chatID, sentMsg.MessageID)
	}

	filePath, reportName, err := b.generateReportFile(reportType, period, format)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
		errorMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err))
		b.api.Send(errorMsg)
		return
	}

	fileBytes, err := os.ReadFile(filePath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞: %v", err)
		errorMsg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")
		b.api.Send(errorMsg)
		return
	}

	b.cleanupReportMessages(chatID)

	var reportTypeName string
	if reportType == "prices" {
		reportTypeName = "—Ü–µ–Ω–∞–º"
	} else {
		reportTypeName = "–æ—Å—Ç–∞—Ç–∫–∞–º"
	}

	doc := tgbotapi.NewDocument(chatID, tgbotapi.FileBytes{
		Name:  reportName,
		Bytes: fileBytes,
	})
	doc.Caption = fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ %s –∑–∞ %s", reportTypeName, b.getPeriodName(period))

	b.api.Send(doc)

	os.Remove(filePath)
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º —á–µ—Ä–µ–∑ ExcelGenerator
func (b *Bot) generateDailyPriceReport(ctx context.Context, startDate, endDate time.Time) error {
	log.Println("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º...")

	if b.excelGenerator != nil {
		log.Println("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π ExcelGenerator")
		filePath, _, err := b.excelGenerator.GeneratePriceReportExcel(ctx, startDate, endDate)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º: %w", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
		doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filePath))
		doc.Caption = fmt.Sprintf("üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ %s",
			startDate.Format("02.01.2006"))
		_, err = b.api.Send(doc)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: %w", err)
		}

		return nil
	}

	return fmt.Errorf("error")

}

func (b *Bot) generateDailyStockReport(ctx context.Context, startDate, endDate time.Time) error {
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting products: %w", err)
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return nil
	}

	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting warehouses: %w", err)
	}

	f := excelize.NewFile()
	sheetName := "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	row := 2
	changesFound := false

	for _, product := range products {
		for _, warehouse := range warehouses {
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) <= 1 {
				// –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
				continue
			}

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			// –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
			if firstStock == lastStock {
				continue
			}

			changesFound = true

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stockChange := lastStock - firstStock
			stockChangePercent := float64(0)
			if firstStock > 0 {
				stockChangePercent = float64(stockChange) / float64(firstStock) * 100
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), warehouse.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), firstStock)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), lastStock)
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), stockChange)
			f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), stockChangePercent)

			row++
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
	if !changesFound {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."))
		return nil
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
	})
	f.SetCellStyle(sheetName, "D2", fmt.Sprintf("F%d", row-1), numberStyle)

	//  —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10,
	})
	f.SetCellStyle(sheetName, "G2", fmt.Sprintf("G%d", row-1), percentStyle)

	filename := fmt.Sprintf("daily_stock_report_%s.xlsx", startDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		return fmt.Errorf("error saving Excel file: %w", err)
	}

	doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ %s",
		startDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		return fmt.Errorf("error sending Excel file: %w", err)
	}

	os.Remove(filepath)
	return nil
}
