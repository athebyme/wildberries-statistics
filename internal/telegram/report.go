package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/xuri/excelize/v2"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"
	"wbmonitoring/monitoring/internal/db"
)

func (b *Bot) sendReportMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º", "report_prices"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", "report_stocks"),
		),
	)

	msg.ReplyMarkup = keyboard
	sentMsg, err := b.api.Send(msg)
	if err == nil {
		b.trackReportMessage(chatID, sentMsg.MessageID)
	}
}

func (b *Bot) generateReport(chatID int64, reportType, period, format string) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	operationID := generateOperationID()

	var reportName string
	if reportType == "prices" {
		reportName = "–æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º"
	} else {
		reportName = "–æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	}

	periodName := b.getPeriodName(period)

	// –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç—Ä–µ–∫–µ—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	totalSteps := 100
	_ = b.progressTracker.StartOperation(operationID, fmt.Sprintf("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è %s –∑–∞ %s", reportName, periodName), totalSteps)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	progressMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"üîÑ –ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è %s –∑–∞ %s –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s.\n\n"+
			"ID –æ–ø–µ—Ä–∞—Ü–∏–∏: `%s`\n\n"+
			"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"+
			"`/status %s`",
		reportName, periodName, strings.ToUpper(format), operationID, operationID))
	progressMsg.ParseMode = "Markdown"
	sentMsg, err := b.api.Send(progressMsg)
	if err == nil {
		b.trackReportMessage(chatID, sentMsg.MessageID)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	go b.updateReportProgress(chatID, sentMsg.MessageID, operationID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
	b.progressTracker.UpdateProgress(operationID, 5, 0, 0, "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—á–µ—Ç–∞")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
	startDate, endDate, err := b.calculateReportDates(period)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞: %v", err)
		b.progressTracker.CompleteOperation(operationID, errorMsg)
		b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg))
		return
	}

	b.progressTracker.UpdateProgress(operationID, 10, 0, 0,
		fmt.Sprintf("–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: —Å %s –ø–æ %s", startDate.Format("02.01.2006"), endDate.Format("02.01.2006")))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		defer func() {
			if r := recover(); r != nil {
				errorMsg := fmt.Sprintf("–ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", r)
				b.progressTracker.CompleteOperation(operationID, errorMsg)
				b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg))
			}
		}()

		b.progressTracker.UpdateProgress(operationID, 15, 0, 0, "–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞")

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
		filePath, fileName, err := b.generateReportFile(reportType, period, format, operationID)
		if err != nil {
			errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
			b.progressTracker.CompleteOperation(operationID, errorMsg)
			b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg))
			return
		}

		b.progressTracker.UpdateProgress(operationID, 90, 0, 0, "–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ")

		// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		fileBytes, err := os.ReadFile(filePath)
		if err != nil {
			errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞: %v", err)
			b.progressTracker.CompleteOperation(operationID, errorMsg)
			b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg))
			return
		}

		b.progressTracker.UpdateProgress(operationID, 95, 0, 0, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞")

		// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
		b.cleanupReportMessages(chatID)

		var reportTypeName string
		if reportType == "prices" {
			reportTypeName = "—Ü–µ–Ω–∞–º"
		} else {
			reportTypeName = "–æ—Å—Ç–∞—Ç–∫–∞–º"
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
		doc := tgbotapi.NewDocument(chatID, tgbotapi.FileBytes{
			Name:  fileName,
			Bytes: fileBytes,
		})
		doc.Caption = fmt.Sprintf("üìä –û—Ç—á–µ—Ç –ø–æ %s –∑–∞ %s", reportTypeName, b.getPeriodName(period))

		_, err = b.api.Send(doc)
		if err != nil {
			errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: %v", err)
			b.progressTracker.CompleteOperation(operationID, errorMsg)
			b.api.Send(tgbotapi.NewMessage(chatID, "‚ùå "+errorMsg))
			return
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
		os.Remove(filePath)

		// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
		b.progressTracker.CompleteOperation(operationID, "")

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
		b.api.Send(tgbotapi.NewMessage(chatID,
			fmt.Sprintf("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID –æ–ø–µ—Ä–∞—Ü–∏–∏: `%s`", operationID)))
	}()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
func (b *Bot) updateReportProgress(chatID int64, messageID int, operationID string) {
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	timeout := time.After(30 * time.Minute)

	for {
		select {
		case <-ticker.C:
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
			op := b.progressTracker.GetOperation(operationID)
			if op == nil {
				return // –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
			}

			// –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			if op.IsComplete {
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
			percentComplete := 0
			if op.TotalItems > 0 {
				percentComplete = int((float64(op.ProcessedItems) / float64(op.TotalItems)) * 100)
			}

			// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			progressBar := ""
			barLength := 10
			filledChars := int(float64(barLength) * float64(percentComplete) / 100.0)

			for i := 0; i < barLength; i++ {
				if i < filledChars {
					progressBar += "‚ñì"
				} else {
					progressBar += "‚ñë"
				}
			}

			msgText := fmt.Sprintf(
				"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (ID: `%s`)\n\n"+
					"*–ü—Ä–æ–≥—Ä–µ—Å—Å*: %d%% %s\n\n"+
					"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏*:\n",
				op.ID, percentComplete, progressBar)

			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
			messagesCount := len(op.Messages)
			start := messagesCount - 3
			if start < 0 {
				start = 0
			}

			for i := start; i < messagesCount; i++ {
				msg := op.Messages[i]
				msgText += fmt.Sprintf("‚Ä¢ %s\n", msg.Message)
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
			elapsedTime := time.Since(op.StartTime).Round(time.Second)
			msgText += fmt.Sprintf("\n*–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*: %s", elapsedTime)

			// –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
			if op.EstimatedEndTime.After(time.Now()) {
				remainingTime := op.EstimatedEndTime.Sub(time.Now()).Round(time.Second)
				msgText += fmt.Sprintf("\n*–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ*: %s", remainingTime)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
			editMsg.ParseMode = "Markdown"
			_, err := b.api.Send(editMsg)
			if err != nil {
				// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: %v", err)
			}

		case <-timeout:
			// –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			return
		}
	}
}

// –†–∞—Å—á–µ—Ç –¥–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–∏–æ–¥–∞
func (b *Bot) calculateReportDates(period string) (startDate, endDate time.Time, err error) {
	now := time.Now()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	if strings.HasPrefix(period, "custom_") {
		parts := strings.Split(period, "_")
		if len(parts) != 3 {
			return time.Time{}, time.Time{}, fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
		}

		startDateStr, endDateStr := parts[1], parts[2]
		startDate, err = time.ParseInLocation("02.01.2006", startDateStr, now.Location())
		if err != nil {
			return time.Time{}, time.Time{}, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã: %w", err)
		}

		endDate, err = time.ParseInLocation("02.01.2006", endDateStr, now.Location())
		if err != nil {
			return time.Time{}, time.Time{}, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã: %w", err)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
		endDate = time.Date(endDate.Year(), endDate.Month(), endDate.Day(), 23, 59, 59, 999999999, endDate.Location())
	} else {
		// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
		switch period {
		case "day":
			startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
			endDate = now
		case "week":
			startDate = now.AddDate(0, 0, -7)
			endDate = now
		case "month":
			startDate = now.AddDate(0, -1, 0)
			endDate = now
		default:
			return time.Time{}, time.Time{}, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: %s", period)
		}
	}

	return startDate, endDate, nil
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º —á–µ—Ä–µ–∑ ExcelGenerator
func (b *Bot) generateDailyPriceReport(ctx context.Context, startDate, endDate time.Time) error {
	log.Println("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º...")

	if b.excelGenerator != nil {
		log.Println("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π ExcelGenerator")
		filePath, _, err := b.excelGenerator.GeneratePriceReportExcel(ctx, startDate, endDate)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º: %w", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
		doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filePath))
		doc.Caption = fmt.Sprintf("üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ %s",
			startDate.Format("02.01.2006"))
		_, err = b.api.Send(doc)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: %w", err)
		}

		return nil
	}

	return fmt.Errorf("error")

}

func (b *Bot) generateDailyStockReport(ctx context.Context, startDate, endDate time.Time) error {
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting products: %w", err)
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return nil
	}

	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting warehouses: %w", err)
	}

	f := excelize.NewFile()
	sheetName := "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	row := 2
	changesFound := false

	for _, product := range products {
		for _, warehouse := range warehouses {
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) <= 1 {
				// –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
				continue
			}

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			// –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
			if firstStock == lastStock {
				continue
			}

			changesFound = true

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stockChange := lastStock - firstStock
			stockChangePercent := float64(0)
			if firstStock > 0 {
				stockChangePercent = float64(stockChange) / float64(firstStock) * 100
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), warehouse.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), firstStock)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), lastStock)
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), stockChange)
			f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), stockChangePercent)

			row++
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
	if !changesFound {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."))
		return nil
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
	})
	f.SetCellStyle(sheetName, "D2", fmt.Sprintf("F%d", row-1), numberStyle)

	//  —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10,
	})
	f.SetCellStyle(sheetName, "G2", fmt.Sprintf("G%d", row-1), percentStyle)

	filename := fmt.Sprintf("daily_stock_report_%s.xlsx", startDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		return fmt.Errorf("error saving Excel file: %w", err)
	}

	doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ %s",
		startDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		return fmt.Errorf("error sending Excel file: %w", err)
	}

	os.Remove(filepath)
	return nil
}
