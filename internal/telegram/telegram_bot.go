package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	"github.com/signintech/gopdf"
	"github.com/xuri/excelize/v2"
	"gopkg.in/gomail.v2"
	"log"
	"math"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"
	"wbmonitoring/monitoring/internal/db"
	"wbmonitoring/monitoring/internal/models"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
type Bot struct {
	api          *tgbotapi.BotAPI
	chatID       int64
	db           *sqlx.DB
	allowedUsers map[int64]bool // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	config       ReportConfig
	userStates   map[int64]string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
type ReportConfig struct {
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
	MinPriceChangePercent float64 `json:"minPriceChangePercent"`
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
	MinStockChangePercent float64 `json:"minStockChangePercent"`
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞
func NewBot(token string, chatID int64, db *sqlx.DB, allowedUserIDs []int64, config ReportConfig) (*Bot, error) {
	log.Printf("allowed users %v", allowedUserIDs)
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("initializing telegram bot: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	allowedUsers := make(map[int64]bool)
	for _, userID := range allowedUserIDs {
		allowedUsers[userID] = true
	}

	return &Bot{
		api:          api,
		chatID:       chatID,
		db:           db,
		allowedUsers: allowedUsers,
		config:       config,
		userStates:   make(map[int64]string),
	}, nil
}

// SendTelegramAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram
func (b *Bot) SendTelegramAlert(message string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	_, err := b.api.Send(msg)
	return err
}

// SendTelegramAlertWithParseMode –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (b *Bot) SendTelegramAlertWithParseMode(message, parseMode string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	msg.ParseMode = parseMode
	_, err := b.api.Send(msg)
	return err
}

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
func (b *Bot) StartBot(ctx context.Context) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			if update.Message != nil {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				if !b.allowedUsers[update.Message.From.ID] {
					log.Printf("Unauthorized access attempt from user ID: %d", update.Message.From.ID)
					b.api.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."))
					continue
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
				b.handleMessage(update.Message)
			} else if update.CallbackQuery != nil {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				if !b.allowedUsers[update.CallbackQuery.From.ID] {
					log.Printf("Unauthorized callback query from user ID: %d", update.CallbackQuery.From.ID)
					continue
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
				b.handleCallbackQuery(update.CallbackQuery)
			}
		case <-ctx.Done():
			return
		}
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	state := b.getUserState(message.Chat.ID)
	if strings.HasPrefix(state, "waiting_custom_period_") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		reportType := strings.TrimPrefix(state, "waiting_custom_period_")

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞
		startDate, endDate, err := b.parseCustomPeriod(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %s\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì", err.Error()))
			b.api.Send(msg)
			return
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback data
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç "startYYYYMMDD_endYYYYMMDD"
		periodCode := fmt.Sprintf("custom_%s_%s",
			startDate.Format("20060102"),
			endDate.Format("20060102"))

		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.clearUserState(message.Chat.ID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
		confirmMsg := tgbotapi.NewMessage(message.Chat.ID,
			fmt.Sprintf("–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s",
				startDate.Format("02.01.2006"),
				endDate.Format("02.01.2006")))
		b.api.Send(confirmMsg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
		b.sendFormatSelection(message.Chat.ID, reportType, periodCode)
	} else if strings.HasPrefix(state, "waiting_email_") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		parts := strings.Split(state, "_")
		if len(parts) >= 3 {
			reportType := parts[2]
			period := parts[3]

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ email
			if !isValidEmail(message.Text) {
				msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
				b.api.Send(msg)
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π email
			b.sendReportToEmail(message.Chat.ID, message.From.ID, reportType, period, message.Text)
			return
		}
	} else {
		switch message.Command() {
		case "start":
			b.sendWelcomeMessage(message.Chat.ID)
		case "report":
			b.sendReportMenu(message.Chat.ID)
		case "help":
			b.sendHelpMessage(message.Chat.ID)
		default:
			// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
			if message.Text != "" {
				b.sendReportMenu(message.Chat.ID)
			}
		}
	}
}

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) sendWelcomeMessage(chatID int64) {
	welcomeText := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wildberries!

–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ReplyMarkup = b.getMainKeyboard()
	b.api.Send(msg)
}

// sendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
func (b *Bot) sendHelpMessage(chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∏–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.

–û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–∞.`

	msg := tgbotapi.NewMessage(chatID, helpText)
	b.api.Send(msg)
}

// getMainKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
func (b *Bot) getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

// sendReportMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendReportMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:")

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º", "report_prices"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", "report_stocks"),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleCallbackQuery
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
	callback := tgbotapi.NewCallback(query.ID, "")
	b.api.Request(callback)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
	if query.Data == "cancel_email_input" {
		b.clearUserState(query.Message.Chat.ID)
		b.api.Send(tgbotapi.NewMessage(query.Message.Chat.ID, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –Ω–∞ email –æ—Ç–º–µ–Ω–µ–Ω–∞"))
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email
	if strings.HasPrefix(query.Data, "save_email_") {
		email := strings.TrimPrefix(query.Data, "save_email_")
		err := b.saveUserEmail(query.From.ID, email)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email: %v", err)
			b.api.Send(tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
		b.api.Send(tgbotapi.NewMessage(query.Message.Chat.ID, "Email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"))
		return
	}

	if query.Data == "dont_save_email" {
		b.api.Send(tgbotapi.NewMessage(query.Message.Chat.ID, "Email –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω."))
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ email
	if strings.HasPrefix(query.Data, "use_saved_email_") {
		parts := strings.Split(query.Data, "_")
		if len(parts) >= 3 {
			reportType := parts[3]
			period := parts[4]

			email, err := b.getUserEmail(query.From.ID)
			if err != nil || email == "" {
				b.api.Send(tgbotapi.NewMessage(query.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å."))
				b.requestEmailInput(query.Message.Chat.ID, reportType, period)
				return
			}

			b.sendReportToEmail(query.Message.Chat.ID, query.From.ID, reportType, period, email)
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ email
	if strings.HasPrefix(query.Data, "enter_new_email_") {
		parts := strings.Split(query.Data, "_")
		if len(parts) >= 3 {
			reportType := parts[3]
			period := parts[4]
			b.requestEmailInput(query.Message.Chat.ID, reportType, period)
		}
		return
	}

	// –û—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤...
	parts := strings.Split(query.Data, "_")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	if len(parts) >= 2 && parts[0] == "report" {
		reportType := parts[1]

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
		if len(parts) == 2 {
			b.sendPeriodSelection(query.Message.Chat.ID, reportType)
			return
		}

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –≤—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
		if len(parts) == 3 {
			period := parts[2]

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
			if period == "custom" {
				b.handleCustomPeriodSelection(query.Message.Chat.ID, reportType)
				return
			}

			// –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
			b.sendFormatSelection(query.Message.Chat.ID, reportType, period)
			return
		}

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á–µ—Ç—ã—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –±–æ–ª—å—à–µ
		if len(parts) >= 4 {
			period := parts[2]
			format := parts[3]

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
			if format == "email" {
				b.handleEmailReportOption(query.Message.Chat.ID, query.From.ID, reportType, period)
				return
			}

			// –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –¥–∞—Ç–∞–º–∏
			if period == "custom" && len(parts) >= 6 {
				startDate := parts[3]
				endDate := parts[4]
				format := parts[5]

				// –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç - email
				if format == "email" {
					customPeriod := fmt.Sprintf("custom_%s_%s", startDate, endDate)
					b.handleEmailReportOption(query.Message.Chat.ID, query.From.ID, reportType, customPeriod)
					return
				}

				customPeriod := fmt.Sprintf("custom_%s_%s", startDate, endDate)
				b.generateReport(query.Message.Chat.ID, reportType, customPeriod, format)
				return
			}

			// –û–±—ã—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Ñ–æ—Ä–º–∞—Ç
			b.generateReport(query.Message.Chat.ID, reportType, period, format)
			return
		}
	}
}

// getPeriodName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
func (b *Bot) getPeriodName(period string) string {
	switch period {
	case "day":
		return "–¥–µ–Ω—å"
	case "week":
		return "–Ω–µ–¥–µ–ª—é"
	case "month":
		return "–º–µ—Å—è—Ü"
	}

	// –î–ª—è custom –ø–µ—Ä–∏–æ–¥–∞
	if strings.HasPrefix(period, "custom_") {
		parts := strings.Split(period, "_")
		if len(parts) >= 3 {
			startStr := parts[1]
			endStr := parts[2]

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç
			layout := "20060102"
			start, err1 := time.Parse(layout, startStr)
			end, err2 := time.Parse(layout, endStr)

			if err1 == nil && err2 == nil {
				return fmt.Sprintf("–ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s",
					start.Format("02.01.2006"),
					end.Format("02.01.2006"))
			}
		}
	}

	return period
}

// handleCustomPeriodSelection –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
func (b *Bot) handleCustomPeriodSelection(chatID int64, reportType string) {
	msgText := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.03.2025-15.03.2025"

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel_custom_period"),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	b.setUserState(chatID, fmt.Sprintf("waiting_custom_period_%s", reportType))
}

// parseCustomPeriod –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func (b *Bot) parseCustomPeriod(periodStr string) (startDate, endDate time.Time, err error) {
	// –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–≤–µ –¥–∞—Ç—ã
	dates := strings.Split(periodStr, "-")
	if len(dates) != 2 {
		return time.Time{}, time.Time{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞")
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	layout := "02.01.2006"
	startDate, err = time.Parse(layout, strings.TrimSpace(dates[0]))
	if err != nil {
		return time.Time{}, time.Time{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: %v", err)
	}

	endDate, err = time.Parse(layout, strings.TrimSpace(dates[1]))
	if err != nil {
		return time.Time{}, time.Time{}, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π
	if endDate.Before(startDate) {
		return time.Time{}, time.Time{}, fmt.Errorf("–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
	}

	return startDate, endDate, nil
}

// setUserState —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) setUserState(chatID int64, state string) {
	// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –±–æ—Ç–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	// –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Bot –ø–æ–ª–µ userStates
	if b.userStates == nil {
		b.userStates = make(map[int64]string)
	}
	b.userStates[chatID] = state
}

// getUserState –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getUserState(chatID int64) string {
	if state, ok := b.userStates[chatID]; ok {
		return state
	}
	return ""
}

// clearUserState –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) clearUserState(chatID int64) {
	delete(b.userStates, chatID)
}

// sendPeriodSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendPeriodSelection(chatID int64, reportType string) {
	var msgText string
	if reportType == "prices" {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º:"
	} else {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:"
	}

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –¥–µ–Ω—å", fmt.Sprintf("report_%s_day", reportType)),
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –Ω–µ–¥–µ–ª—é", fmt.Sprintf("report_%s_week", reportType)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –º–µ—Å—è—Ü", fmt.Sprintf("report_%s_month", reportType)),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", fmt.Sprintf("report_%s_custom", reportType)),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// sendFormatSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendFormatSelection(chatID int64, reportType string, period string) {
	var msgText string
	if reportType == "prices" {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º:"
	} else {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:"
	}

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∏ –æ–ø—Ü–∏–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("Excel", fmt.Sprintf("report_%s_%s_excel", reportType, period)),
			tgbotapi.NewInlineKeyboardButtonData("PDF", fmt.Sprintf("report_%s_%s_pdf", reportType, period)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É", fmt.Sprintf("report_%s_%s_email", reportType, period)),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// addDynamicChangesSheet –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–∏—Å—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
// —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
func addDynamicChangesSheet(
	f *excelize.File,
	products []models.ProductRecord,
	ctx context.Context,
	database *sqlx.DB,
	startDate, endDate time.Time,
	isPriceReport bool,
	config ReportConfig,
	warehouses []models.Warehouse,
) error {
	// –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	sheetName := "–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω"
	if !isPriceReport {
		sheetName = "–î–∏–Ω–∞–º–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤"
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
	_, err := f.NewSheet(sheetName)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	var headers []string
	if isPriceReport {
		headers = []string{
			"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–î–∞—Ç–∞", "–¶–µ–Ω–∞ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
		}
	} else {
		headers = []string{
			"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–î–∞—Ç–∞", "–û—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
		}
	}

	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	productsAdded := 0

	// –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
	if isPriceReport {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
		for _, product := range products {
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
			prices, err := db.GetPricesForPeriod(ctx, database, product.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting prices for product %d: %v", product.ID, err)
				continue
			}

			if len(prices) < 2 {
				continue // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			firstPrice := prices[0].FinalPrice
			lastPrice := prices[len(prices)-1].FinalPrice
			totalChangePercent := 0.0
			if firstPrice > 0 {
				totalChangePercent = float64(lastPrice-firstPrice) / float64(firstPrice) * 100
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			if math.Abs(totalChangePercent) < config.MinPriceChangePercent {
				continue
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
			var prevPrice int
			var firstEntryForProduct bool = true

			for i, price := range prices {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
				if i == 0 {
					prevPrice = price.FinalPrice
					continue
				}

				// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å—å—é
				priceChange := price.FinalPrice - prevPrice
				changePercent := 0.0
				if prevPrice > 0 {
					changePercent = float64((priceChange / prevPrice) * 100)
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
				if priceChange != 0 {
					// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏ –∞—Ä—Ç–∏–∫—É–ª
					if firstEntryForProduct {
						f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
						f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
						firstEntryForProduct = false
						productsAdded++
					} else {
						// –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∏ –∏–º–µ–Ω–∏ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞
						f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), "")
						f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), "")
					}

					f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), price.RecordedAt.Format("02.01.2006 15:04"))
					f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), price.FinalPrice)
					f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange)/100)
					f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), changePercent)

					row++
				}

				prevPrice = price.FinalPrice
			}
		}
	} else {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
		for _, product := range products {
			for _, warehouse := range warehouses {
				// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤
				stocks, err := db.GetStocksForPeriod(ctx, database, product.ID, warehouse.ID, startDate, endDate)
				if err != nil {
					log.Printf("Error getting stocks for product %d on warehouse %d: %v",
						product.ID, warehouse.ID, err)
					continue
				}

				if len(stocks) < 2 {
					continue // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
				firstStock := stocks[0].Amount
				lastStock := stocks[len(stocks)-1].Amount
				totalChangePercent := 0.0
				if firstStock > 0 {
					totalChangePercent = float64(lastStock-firstStock) / float64(firstStock) * 100
				} else if firstStock == 0 && lastStock > 0 {
					// –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –±—ã–ª 0, –∞ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
					totalChangePercent = 100.0
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
				if math.Abs(totalChangePercent) < config.MinStockChangePercent {
					continue
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
				var prevStock int
				var firstEntryForProduct bool = true

				for i, stock := range stocks {
					// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
					if i == 0 {
						prevStock = stock.Amount
						continue
					}

					// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å—å—é
					stockChange := stock.Amount - prevStock
					changePercent := 0.0
					if prevStock > 0 {
						changePercent = float64(stockChange) / float64(prevStock) * 100
					} else if prevStock == 0 && stock.Amount > 0 {
						changePercent = 100.0
					}

					// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
					if stockChange != 0 {
						// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏ –∞—Ä—Ç–∏–∫—É–ª
						if firstEntryForProduct {
							f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
							f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
							f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), warehouse.Name)
							firstEntryForProduct = false
							productsAdded++
						} else {
							// –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∏ –∏–º–µ–Ω–∏ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞
							f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), "")
							f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), "")
							f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), "")
						}

						f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), stock.RecordedAt.Format("02.01.2006 15:04"))
						f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), stock.Amount)
						f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), stockChange)
						f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), changePercent)

						row++
					}

					prevStock = stock.Amount
				}
			}
		}
	}

	// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
	if productsAdded == 0 {
		emptyRow := 3
		if isPriceReport {
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", emptyRow),
				fmt.Sprintf("–¢–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –±–æ–ª–µ–µ %.1f%% –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", config.MinPriceChangePercent))
		} else {
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", emptyRow),
				fmt.Sprintf("–¢–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–∞ –±–æ–ª–µ–µ %.1f%% –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", config.MinStockChangePercent))
		}
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	if isPriceReport {
		// –°—Ç–∏–ª—å –¥–ª—è —Ü–µ–Ω —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
		numberStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 2, // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
		})
		f.SetCellStyle(sheetName, "D2", fmt.Sprintf("E%d", row-1), numberStyle)

		// –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
		percentStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		})
		f.SetCellStyle(sheetName, "F2", fmt.Sprintf("F%d", row-1), percentStyle)
	} else {
		// –°—Ç–∏–ª—å –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
		numberStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
		})
		f.SetCellStyle(sheetName, "E2", fmt.Sprintf("F%d", row-1), numberStyle)

		// –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
		percentStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		})
		f.SetCellStyle(sheetName, "G2", fmt.Sprintf("G%d", row-1), percentStyle)
	}

	// –î–æ–±–∞–≤–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ)
	currentProduct := ""
	for r := 2; r < row; r++ {
		productName, _ := f.GetCellValue(sheetName, fmt.Sprintf("A%d", r))
		if productName != "" {
			// –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –ø—É—Å—Ç–æ–π
			if currentProduct != "" && currentProduct != productName {
				// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–Ω–∫–∏–π —Å—Ç–∏–ª—å –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
				borderStyle, _ := f.NewStyle(&excelize.Style{
					Border: []excelize.Border{
						{Type: "bottom", Color: "#CCCCCC", Style: 1},
					},
				})
				lastCol := string(rune('A' + len(headers) - 1))
				f.SetCellStyle(sheetName, "A"+strconv.Itoa(r-1), lastCol+strconv.Itoa(r-1), borderStyle)
			}
			currentProduct = productName

		}
	}

	return nil
}

// generateReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func (b *Bot) generateReport(chatID int64, reportType, period, format string) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
	statusMsg, _ := b.api.Send(tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."))

	var startDate, endDate time.Time
	now := time.Now()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
	switch period {
	case "day":
		startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		endDate = now
	case "week":
		startDate = now.AddDate(0, 0, -7)
		endDate = now
	case "month":
		startDate = now.AddDate(0, -1, 0)
		endDate = now
	case "custom":
		// –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
		b.api.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."))
		return
	default:
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."))
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
	if reportType == "prices" {
		if format == "pdf" {
			b.generatePriceReportPDF(chatID, startDate, endDate, b.config)
		} else if format == "excel" {
			b.generatePriceReportExcel(chatID, startDate, endDate, b.config)
		} else {
			b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."))
		}
	} else if reportType == "stocks" {
		if format == "pdf" {
			b.generateStockReportPDF(chatID, startDate, endDate, b.config)
		} else if format == "excel" {
			b.generateStockReportExcel(chatID, startDate, endDate, b.config)
		} else {
			b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø."))
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, statusMsg.MessageID)
	b.api.Request(deleteMsg)
}

// generatePriceReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (b *Bot) generatePriceReport(chatID int64, startDate, endDate time.Time) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := fmt.Sprintf("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s\n\n",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))

	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) == 0 {
			continue
		}

		// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥
		var minPrice, maxPrice, firstPrice, lastPrice int
		firstPrice = prices[0].FinalPrice
		lastPrice = prices[len(prices)-1].FinalPrice
		minPrice = firstPrice
		maxPrice = firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –æ—Ç—á–µ—Ç
		reportText += fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. %s)\n", product.Name, product.VendorCode)
		reportText += fmt.Sprintf("–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %d‚ÇΩ\n", firstPrice)
		reportText += fmt.Sprintf("–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: %d‚ÇΩ\n", lastPrice)
		reportText += fmt.Sprintf("–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %d‚ÇΩ (%.2f%%)\n", priceChange, priceChangePercent)
		reportText += fmt.Sprintf("–ú–∏–Ω. —Ü–µ–Ω–∞: %d‚ÇΩ, –ú–∞–∫—Å. —Ü–µ–Ω–∞: %d‚ÇΩ\n", minPrice, maxPrice)
		reportText += fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", len(prices))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	if len(reportText) > 4096 {
		// Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
		// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		for i := 0; i < len(reportText); i += 4000 {
			end := i + 4000
			if end > len(reportText) {
				end = len(reportText)
			}
			b.api.Send(tgbotapi.NewMessage(chatID, reportText[i:end]))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, reportText))
	}
}

// generatePriceReportExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
func (b *Bot) generatePriceReportExcel(chatID int64, startDate, endDate time.Time, config ReportConfig) {
	ctx := context.Background()

	// –ö–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∫–∞–∫ –±—ã–ª —Ä–∞–Ω—å—à–µ, –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) == 0 {
			continue
		}

		// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥
		var minPrice, maxPrice, firstPrice, lastPrice int
		firstPrice = prices[0].FinalPrice
		lastPrice = prices[len(prices)-1].FinalPrice
		minPrice = firstPrice
		maxPrice = firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
		f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), firstPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), lastPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange))
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), priceChangePercent)
		f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), minPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("H%d", row), maxPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("I%d", row), len(prices))

		row++
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 2, // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("H%d", row-1), numberStyle)

	warehouses, _ := db.GetAllWarehouses(ctx, b.db) // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
	err = addDynamicChangesSheet(f, products, ctx, b.db, startDate, endDate, true, config, warehouses)
	if err != nil {
		log.Printf("Error adding dynamic changes sheet: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("price_report_%s_%s.xlsx",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		log.Printf("Error saving Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		log.Printf("Error sending Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel-—Ñ–∞–π–ª–∞."))
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
}

// generateStockReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (b *Bot) generateStockReport(chatID int64, startDate, endDate time.Time) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := fmt.Sprintf("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s\n\n",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))

	for _, product := range products {
		totalFirstStock := 0
		totalLastStock := 0
		totalRecords := 0

		productText := fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. %s)\n", product.Name, product.VendorCode)
		hasStocks := false

		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) == 0 {
				continue
			}

			hasStocks = true
			totalRecords += len(stocks)

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			totalFirstStock += firstStock
			totalLastStock += lastStock

			// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			minStock := firstStock
			maxStock := firstStock

			for _, stock := range stocks {
				if stock.Amount < minStock {
					minStock = stock.Amount
				}
				if stock.Amount > maxStock {
					maxStock = stock.Amount
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –≤ –æ—Ç—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
			productText += fmt.Sprintf("  –°–∫–ª–∞–¥ %s:\n", warehouse.Name)
			productText += fmt.Sprintf("    –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", firstStock)
			productText += fmt.Sprintf("    –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", lastStock)
			productText += fmt.Sprintf("    –ò–∑–º–µ–Ω–µ–Ω–∏–µ: %d —à—Ç.\n", lastStock-firstStock)
			productText += fmt.Sprintf("    –ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç., –ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", minStock, maxStock)
		}

		if hasStocks {
			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–∞—Ö
			productText += fmt.Sprintf("  –û–±—â–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", totalFirstStock)
			productText += fmt.Sprintf("  –û–±—â–∏–π –∫–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", totalLastStock)
			productText += fmt.Sprintf("  –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: %d —à—Ç.\n", totalLastStock-totalFirstStock)
			productText += fmt.Sprintf("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", totalRecords)

			reportText += productText
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	if len(reportText) > 4096 {
		// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		for i := 0; i < len(reportText); i += 4000 {
			end := i + 4000
			if end > len(reportText) {
				end = len(reportText)
			}
			b.api.Send(tgbotapi.NewMessage(chatID, reportText[i:end]))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, reportText))
	}
}

// generateStockReportExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
func (b *Bot) generateStockReportExcel(chatID int64, startDate, endDate time.Time, config ReportConfig) {
	ctx := context.Background()

	// –ö–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∫–∞–∫ –±—ã–ª —Ä–∞–Ω—å—à–µ, –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
	detailSheetName := "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º"
	index, err := f.NewSheet(detailSheetName)
	if err != nil {
		log.Printf("Error creating detail sheet: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	detailHeaders := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range detailHeaders {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(detailSheetName, cell, header)
	}
	f.SetCellStyle(detailSheetName, "A1", string(rune('A'+len(detailHeaders)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	detailRow := 2

	for _, product := range products {
		totalFirstStock := 0
		totalLastStock := 0
		totalMinStock := 0
		totalMaxStock := 0
		totalRecords := 0
		hasStocks := false

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
		warehouseData := []struct {
			warehouseName string
			firstStock    int
			lastStock     int
			minStock      int
			maxStock      int
			records       int
		}{}

		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) == 0 {
				continue
			}

			hasStocks = true

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			minStock := firstStock
			maxStock := firstStock

			for _, stock := range stocks {
				if stock.Amount < minStock {
					minStock = stock.Amount
				}
				if stock.Amount > maxStock {
					maxStock = stock.Amount
				}
			}

			// –°—É–º–º–∏—Ä—É–µ–º –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
			totalFirstStock += firstStock
			totalLastStock += lastStock
			if totalMinStock == 0 || minStock < totalMinStock {
				totalMinStock = minStock
			}
			if maxStock > totalMaxStock {
				totalMaxStock = maxStock
			}
			totalRecords += len(stocks)

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
			f.SetCellValue(detailSheetName, fmt.Sprintf("A%d", detailRow), product.Name)
			f.SetCellValue(detailSheetName, fmt.Sprintf("B%d", detailRow), product.VendorCode)
			f.SetCellValue(detailSheetName, fmt.Sprintf("C%d", detailRow), warehouse.Name)
			f.SetCellValue(detailSheetName, fmt.Sprintf("D%d", detailRow), firstStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("E%d", detailRow), lastStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("F%d", detailRow), lastStock-firstStock)

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
			changePercent := float64(0)
			if firstStock > 0 {
				changePercent = float64(lastStock-firstStock) / float64(firstStock) * 100
			}
			f.SetCellValue(detailSheetName, fmt.Sprintf("G%d", detailRow), changePercent)

			f.SetCellValue(detailSheetName, fmt.Sprintf("H%d", detailRow), minStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("I%d", detailRow), maxStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("J%d", detailRow), len(stocks))

			detailRow++

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
			warehouseData = append(warehouseData, struct {
				warehouseName string
				firstStock    int
				lastStock     int
				minStock      int
				maxStock      int
				records       int
			}{
				warehouseName: warehouse.Name,
				firstStock:    firstStock,
				lastStock:     lastStock,
				minStock:      minStock,
				maxStock:      maxStock,
				records:       len(stocks),
			})
		}

		if hasStocks {
			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É–º–º–∞—Ä–Ω—ã–π –ª–∏—Å—Ç
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), totalFirstStock)
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), totalLastStock)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), totalLastStock-totalFirstStock)

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
			changePercent := float64(0)
			if totalFirstStock > 0 {
				changePercent = float64(totalLastStock-totalFirstStock) / float64(totalFirstStock) * 100
			}
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), changePercent)

			f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), totalMinStock)
			f.SetCellValue(sheetName, fmt.Sprintf("H%d", row), totalMaxStock)
			f.SetCellValue(sheetName, fmt.Sprintf("I%d", row), totalRecords)

			row++
		}
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	for i := range detailHeaders {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(detailSheetName, col)
		if width < 15 {
			f.SetColWidth(detailSheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("E%d", row-1), numberStyle)
	f.SetCellStyle(sheetName, "G2", fmt.Sprintf("I%d", row-1), numberStyle)
	f.SetCellStyle(detailSheetName, "D2", fmt.Sprintf("F%d", detailRow-1), numberStyle)
	f.SetCellStyle(detailSheetName, "H2", fmt.Sprintf("J%d", detailRow-1), numberStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	})
	f.SetCellStyle(sheetName, "F2", fmt.Sprintf("F%d", row-1), percentStyle)
	f.SetCellStyle(detailSheetName, "G2", fmt.Sprintf("G%d", detailRow-1), percentStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
	f.SetActiveSheet(index)

	// –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
	err = addDynamicChangesSheet(f, products, ctx, b.db, startDate, endDate, false, config, warehouses)
	if err != nil {
		log.Printf("Error adding dynamic changes sheet: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("stock_report_%s_%s.xlsx",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		log.Printf("Error saving Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		log.Printf("Error sending Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel-—Ñ–∞–π–ª–∞."))
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
}

// generateStockReportPDFToFile –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ PDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª
func (b *Bot) generateStockReportPDFToFile(startDate, endDate time.Time, config ReportConfig) (string, string, error) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —Å–∫–ª–∞–¥—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)
	}

	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)
	}

	if len(products) == 0 {
		return "", "", fmt.Errorf("—Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PDF-–¥–æ–∫—É–º–µ–Ω—Ç
	pdf := gopdf.GoPdf{}
	pdf.Start(gopdf.Config{PageSize: *gopdf.PageSizeA4Landscape})
	pdf.AddPage()
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
	if err := pdf.AddTTFFont("arial", "fonts/arial.ttf"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: %v", err)
		return "", "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç: %v", err)
	}
	if err := pdf.AddTTFFont("arial-bold", "fonts/arialbd.ttf"); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞: %v", err)
		return "", "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
	pdf.SetFont("arial-bold", "", 16)
	pdf.SetX(30)
	pdf.SetY(20)
	title := fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—Å–∫–∏–º –∑–∞–ø–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"), endDate.Format("02.01.2006"))
	pdf.Cell(nil, title)
	pdf.Br(25)

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	headers := []string{"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª"}
	for _, wh := range warehouses {
		headers = append(headers, wh.Name)
	}
	headers = append(headers, "–í—Å–µ–≥–æ", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ")

	// –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
	colWidths := []float64{120, 60}
	for range warehouses {
		colWidths = append(colWidths, 40)
	}
	colWidths = append(colWidths, 40, 40)

	// –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
	pdf.SetFont("arial-bold", "", 10)
	pdf.SetFillColor(221, 235, 247) // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
	x := 30.0
	y := pdf.GetY()
	headerHeight := 20.0
	for i, header := range headers {
		pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight, "FD", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 6)
		pdf.Cell(nil, header)
		x += colWidths[i]
	}
	pdf.SetStrokeColor(0, 0, 0) // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

	// –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
	y += headerHeight
	rowHeight := 20.0
	pdf.SetFont("arial", "", 9)

	type TimeSeriesData struct {
		Product   models.ProductRecord
		TotalData []struct {
			Date     time.Time
			Quantity int
		}
		WarehouseData map[int][]models.StockRecord
	}

	timeSeriesDataList := make([]TimeSeriesData, 0)

	for _, product := range products {
		warehouseStocks := make(map[int]int)
		warehouseInitial := make(map[int]int)
		warehouseRecords := make(map[int][]models.StockRecord)
		totalStock := 0
		totalChange := 0
		totalInitialStock := 0

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
		for _, warehouse := range warehouses {
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ %d, —Å–∫–ª–∞–¥–∞ %d: %v", product.ID, warehouse.ID, err)
				continue
			}
			if len(stocks) == 0 {
				continue
			}

			warehouseRecords[int(warehouse.ID)] = stocks
			warehouseInitial[int(warehouse.ID)] = stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount
			warehouseStocks[int(warehouse.ID)] = lastStock
			totalStock += lastStock
			totalChange += lastStock - stocks[0].Amount
			totalInitialStock += stocks[0].Amount
		}

		if len(warehouseStocks) == 0 {
			continue
		}

		// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ MinStockChangePercent –∏–∑ ReportConfig
		if config.MinStockChangePercent > 0 && totalInitialStock > 0 {
			stockChangePercent := (float64(totalChange) / float64(totalInitialStock)) * 100
			if stockChangePercent < config.MinStockChangePercent && stockChangePercent > -config.MinStockChangePercent {
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		if y > 500 {
			pdf.AddPage()
			y = 30.0
			pdf.SetFont("arial-bold", "", 10)
			pdf.SetFillColor(221, 235, 247)
			x = 30.0
			for i, header := range headers {
				pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight, "FD", 0, 0)
				pdf.SetX(x + 2)
				pdf.SetY(y + 6)
				pdf.Cell(nil, header)
				x += colWidths[i]
			}
			pdf.SetStrokeColor(0, 0, 0)
			y += headerHeight
			pdf.SetFont("arial", "", 9)
		}

		// –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
		x = 30.0
		name := product.Name
		if len(name) > 25 {
			name = name[:22] + "..."
		}
		pdf.Rectangle(x, y, x+colWidths[0], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 6)
		pdf.Cell(nil, name)
		x += colWidths[0]

		pdf.Rectangle(x, y, x+colWidths[1], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 6)
		pdf.Cell(nil, product.VendorCode)
		x += colWidths[1]

		for _, wh := range warehouses {
			pdf.Rectangle(x, y, x+colWidths[2], y+rowHeight, "D", 0, 0)
			pdf.SetX(x + 2)
			pdf.SetY(y + 6)
			if qty, ok := warehouseStocks[int(wh.ID)]; ok {
				pdf.Cell(nil, fmt.Sprintf("%d", qty))
			} else {
				pdf.Cell(nil, "0")
			}
			x += colWidths[2]
		}

		pdf.Rectangle(x, y, x+colWidths[len(colWidths)-2], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 6)
		pdf.Cell(nil, fmt.Sprintf("%d", totalStock))
		x += colWidths[len(colWidths)-2]

		pdf.Rectangle(x, y, x+colWidths[len(colWidths)-1], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 6)
		pdf.Cell(nil, fmt.Sprintf("%+d", totalChange))

		y += rowHeight

		// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
		if len(warehouseRecords) > 0 {
			datesMap := make(map[time.Time]bool)
			for _, records := range warehouseRecords {
				for _, r := range records {
					date := r.RecordedAt.Truncate(24 * time.Hour)
					datesMap[date] = true
				}
			}

			dates := make([]time.Time, 0, len(datesMap))
			for date := range datesMap {
				dates = append(dates, date)
			}
			sort.Slice(dates, func(i, j int) bool { return dates[i].Before(dates[j]) })

			totalData := make([]struct {
				Date     time.Time
				Quantity int
			}, len(dates))
			for i, date := range dates {
				qty := 0
				for _, records := range warehouseRecords {
					for _, r := range records {
						if r.RecordedAt.Truncate(24 * time.Hour).Equal(date) {
							qty += r.Amount
							break
						}
					}
				}
				totalData[i] = struct {
					Date     time.Time
					Quantity int
				}{date, qty}
			}

			timeSeriesDataList = append(timeSeriesDataList, TimeSeriesData{
				Product:       product,
				TotalData:     totalData,
				WarehouseData: warehouseRecords,
			})
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
	if len(timeSeriesDataList) > 0 {
		pdf.AddPage()
		pdf.SetFont("arial-bold", "", 14)
		pdf.SetX(30)
		pdf.SetY(20)
		pdf.Cell(nil, "–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤")
		y = 50.0

		for _, ts := range timeSeriesDataList {
			if len(ts.TotalData) < 2 {
				continue
			}

			if y > 500 {
				pdf.AddPage()
				y = 50.0
			}

			// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
			pdf.SetFont("arial-bold", "", 12)
			pdf.SetX(30)
			pdf.SetY(y)
			pdf.Cell(nil, fmt.Sprintf("%s (%s)", ts.Product.Name, ts.Product.VendorCode))
			y += 20

			// –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
			graphWidth := 700.0
			graphHeight := 120.0
			marginLeft := 50.0
			xAxisLength := graphWidth - marginLeft
			yAxisLength := graphHeight - 20

			minQty, maxQty := ts.TotalData[0].Quantity, ts.TotalData[0].Quantity
			for _, d := range ts.TotalData {
				if d.Quantity < minQty {
					minQty = d.Quantity
				}
				if d.Quantity > maxQty {
					maxQty = d.Quantity
				}
			}
			yBuffer := int(float64(maxQty-minQty)*0.1) + 1
			minQty = max(0, minQty-yBuffer)
			maxQty += yBuffer

			// –û—Å–∏
			pdf.SetStrokeColor(0, 0, 0)
			pdf.Line(30+marginLeft, y+yAxisLength, 30+marginLeft+xAxisLength, y+yAxisLength) // X-–æ—Å—å
			pdf.Line(30+marginLeft, y, 30+marginLeft, y+yAxisLength)                         // Y-–æ—Å—å

			// –ú–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ Y
			pdf.SetFont("arial", "", 8)
			for i := 0; i <= 5; i++ {
				tickY := y + yAxisLength - (float64(i) * yAxisLength / 5)
				value := minQty + (maxQty-minQty)*i/5
				pdf.SetX(20)
				pdf.SetY(tickY - 3)
				pdf.Cell(nil, fmt.Sprintf("%d", value))
			}

			// –ú–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X (–¥–æ 10)
			numTicks := min(len(ts.TotalData), 10)
			for i := 0; i < numTicks; i++ {
				idx := i * (len(ts.TotalData) - 1) / max(numTicks-1, 1)
				xPos := 30 + marginLeft + float64(i)*xAxisLength/float64(numTicks-1)
				pdf.SetX(xPos - 10)
				pdf.SetY(y + yAxisLength + 5)
				pdf.Cell(nil, ts.TotalData[idx].Date.Format("02.01"))
			}

			// –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
			pdf.SetStrokeColor(0, 0, 255)
			pdf.SetLineWidth(2)
			for i := 0; i < len(ts.TotalData)-1; i++ {
				x1 := 30 + marginLeft + float64(i)*xAxisLength/float64(len(ts.TotalData)-1)
				y1 := y + yAxisLength - (float64(ts.TotalData[i].Quantity-minQty) * yAxisLength / float64(maxQty-minQty))
				x2 := 30 + marginLeft + float64(i+1)*xAxisLength/float64(len(ts.TotalData)-1)
				y2 := y + yAxisLength - (float64(ts.TotalData[i+1].Quantity-minQty) * yAxisLength / float64(maxQty-minQty))
				pdf.Line(x1, y1, x2, y2)
			}
			pdf.SetLineWidth(1)

			y += graphHeight + 20
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ —Ñ–∞–π–ª
	filename := fmt.Sprintf("stock_report_%s_%s.pdf", startDate.Format("02-01-2006"), endDate.Format("02-01-2006"))
	filePath := filepath.Join(os.TempDir(), filename)
	if err := pdf.WritePdf(filePath); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: %v", err)
		return "", "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF: %v", err)
	}

	return filePath, filename, nil
}

// SendDailyReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∏ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —á–∞—Ç
func (b *Bot) SendDailyReport(ctx context.Context) error {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞: —Å–µ–≥–æ–¥–Ω—è —Å 00:00 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
	now := time.Now()
	startDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
	endDate := now

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
	statusMsg, err := b.api.Send(tgbotapi.NewMessage(b.chatID, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."))
	if err != nil {
		return fmt.Errorf("error sending status message: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ Excel
	errPrice := b.generateDailyPriceReport(ctx, startDate, endDate)
	if errPrice != nil {
		log.Printf("Error generating daily price report: %v", errPrice)
		b.api.Send(tgbotapi.NewMessage(b.chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º: %v", errPrice)))
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ Excel
	errStock := b.generateDailyStockReport(ctx, startDate, endDate)
	if errStock != nil {
		log.Printf("Error generating daily stock report: %v", errStock)
		b.api.Send(tgbotapi.NewMessage(b.chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º: %v", errStock)))
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(b.chatID, statusMsg.MessageID)
	b.api.Request(deleteMsg)

	// –ï—Å–ª–∏ –æ–±–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
	if errPrice != nil && errStock != nil {
		return fmt.Errorf("failed to generate daily reports: price: %v, stock: %v", errPrice, errStock)
	}

	return nil
}

// generateDailyPriceReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º
func (b *Bot) generateDailyPriceReport(ctx context.Context, startDate, endDate time.Time) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω–∏–≤—à–µ–π—Å—è —Ü–µ–Ω–æ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting products: %w", err)
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	productsAdded := 0

	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) <= 1 {
			// –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
			continue
		}

		// –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		firstPrice := prices[0].FinalPrice
		lastPrice := prices[len(prices)-1].FinalPrice

		// –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
		if firstPrice == lastPrice {
			continue
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
		f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), float64(firstPrice)/100)
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), float64(lastPrice)/100)
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange)/100)
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), priceChangePercent)

		row++
		productsAdded++
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ü–µ–Ω–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
	if productsAdded == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ü–µ–Ω–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."))
		return nil
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 2, // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("E%d", row-1), numberStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	})
	f.SetCellStyle(sheetName, "F2", fmt.Sprintf("F%d", row-1), percentStyle)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("daily_price_report_%s.xlsx", startDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		return fmt.Errorf("error saving Excel file: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–µ–Ω –∑–∞ %s",
		startDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		return fmt.Errorf("error sending Excel file: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
	return nil
}

// generateDailyStockReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
func (b *Bot) generateDailyStockReport(ctx context.Context, startDate, endDate time.Time) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting products: %w", err)
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting warehouses: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	changesFound := false

	for _, product := range products {
		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) <= 1 {
				// –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
				continue
			}

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			// –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
			if firstStock == lastStock {
				continue
			}

			changesFound = true

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stockChange := lastStock - firstStock
			stockChangePercent := float64(0)
			if firstStock > 0 {
				stockChangePercent = float64(stockChange) / float64(firstStock) * 100
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), warehouse.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), firstStock)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), lastStock)
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), stockChange)
			f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), stockChangePercent)

			row++
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
	if !changesFound {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."))
		return nil
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
	})
	f.SetCellStyle(sheetName, "D2", fmt.Sprintf("F%d", row-1), numberStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	})
	f.SetCellStyle(sheetName, "G2", fmt.Sprintf("G%d", row-1), percentStyle)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("daily_stock_report_%s.xlsx", startDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		return fmt.Errorf("error saving Excel file: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ %s",
		startDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		return fmt.Errorf("error sending Excel file: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
	return nil
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserEmail struct {
	UserID    int64     `db:"user_id"`
	Email     string    `db:"email"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email
func (b *Bot) initializeEmailStorage() error {
	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	_, err := b.db.Exec(`
        CREATE TABLE IF NOT EXISTS user_emails (
            user_id BIGINT PRIMARY KEY,
            email TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
    `)
	return err
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getUserEmail(userID int64) (string, error) {
	var email string
	err := b.db.Get(&email, "SELECT email FROM user_emails WHERE user_id = $1", userID)
	if err != nil {
		if err.Error() == "sql: no rows in result set" {
			return "", nil // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
		}
		return "", err
	}
	return email, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) saveUserEmail(userID int64, email string) error {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var count int
	err := b.db.Get(&count, "SELECT count(*) FROM user_emails WHERE user_id = $1", userID)
	if err != nil {
		return err
	}

	if count == 0 {
		// –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
		_, err = b.db.Exec(
			"INSERT INTO user_emails (user_id, email) VALUES ($1, $2)",
			userID, email)
		return err
	}

	// –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
	_, err = b.db.Exec(
		"UPDATE user_emails SET email = $1, updated_at = NOW() WHERE user_id = $2",
		email, userID)
	return err
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email
func isValidEmail(email string) bool {
	// –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ email
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}$`)
	return emailRegex.MatchString(email)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –ø–æ—á—Ç—É
func (b *Bot) handleEmailReportOption(chatID int64, userID int64, reportType string, period string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π email
	email, err := b.getUserEmail(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if email != "" {
		// –ï—Å–ª–∏ email —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %s\n–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π?", email))

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π",
					fmt.Sprintf("use_saved_email_%s_%s", reportType, period)),
				tgbotapi.NewInlineKeyboardButtonData("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π",
					fmt.Sprintf("enter_new_email_%s_%s", reportType, period)),
			),
		)

		msg.ReplyMarkup = keyboard
		b.api.Send(msg)
	} else {
		// –ï—Å–ª–∏ email –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
		b.requestEmailInput(chatID, reportType, period)
	}
}

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ email
func (b *Bot) requestEmailInput(chatID int64, reportType string, period string) {
	msgText := "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:"

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∞", "cancel_email_input"),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç email –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	b.setUserState(chatID, fmt.Sprintf("waiting_email_%s_%s", reportType, period))
}

func (b *Bot) sendReportToEmail(chatID int64, userID int64, reportType string, period string, email string) {
	b.api.Send(tgbotapi.NewMessage(chatID, "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É..."))

	// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∑–¥–µ—Å—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥; –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç
	now := time.Now()
	var startDate, endDate time.Time
	switch period {
	case "day":
		startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		endDate = now
	case "week":
		startDate = now.AddDate(0, 0, -7)
		endDate = now
	case "month":
		startDate = now.AddDate(0, -1, 0)
		endDate = now
	default:
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."))
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	filePath, reportName, err := b.generatePriceReportExcelToFile(startDate, endDate, b.config)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è sendEmail –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
	err = b.sendEmail(email, reportType, period, filePath, reportName)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –Ω–∞ email: %v", err)))
		return
	}

	// –ï—Å–ª–∏ email –Ω–æ–≤—ã–π, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –µ–≥–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
	state := b.getUserState(chatID)
	if strings.HasPrefix(state, "waiting_email_") {
		msg := tgbotapi.NewMessage(chatID,
			fmt.Sprintf("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ %s\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤?", email))
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞", fmt.Sprintf("save_email_%s", email)),
				tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "dont_save_email"),
			),
		)
		msg.ReplyMarkup = keyboard
		b.api.Send(msg)
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ %s", email)))
	}

	b.clearUserState(chatID)
}

// generateReportFile –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª,
// –≤–æ–∑–≤—Ä–∞—â–∞—è –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∏–º—è –æ—Ç—á—ë—Ç–∞ –∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞.
func (b *Bot) generateReportFile(reportType, period, format string) (filePath, reportName string, err error) {
	var startDate, endDate time.Time
	now := time.Now()

	// –†–∞—Å—á—ë—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
	switch period {
	case "day":
		startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		endDate = now
	case "week":
		startDate = now.AddDate(0, 0, -7)
		endDate = now
	case "month":
		startDate = now.AddDate(0, -1, 0)
		endDate = now
	default:
		return "", "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞.
	// –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ generatePriceReportExcelToFile, generateStockReportExcelToFile,
	// generatePriceReportPDFToFile, generateStockReportPDFToFile —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª.
	switch reportType {
	case "prices":
		if format == "excel" {
			return b.generatePriceReportExcelToFile(startDate, endDate, b.config)
		} else if format == "pdf" {
			return b.generatePriceReportPDFToFile(startDate, endDate, b.config)
		}
	case "stocks":
		if format == "excel" {
			return b.generateStockReportExcelToFile(startDate, endDate, b.config)
		} else if format == "pdf" {
			return b.generateStockReportPDFToFile(startDate, endDate, b.config)
		}
	}

	return "", "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç")
}

// generatePriceReportExcelToFile –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∏–º—è –æ—Ç—á–µ—Ç–∞ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç).
func (b *Bot) generatePriceReportExcelToFile(startDate, endDate time.Time, config ReportConfig) (string, string, error) {
	ctx := context.Background()

	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)
	}

	if len(products) == 0 {
		return "", "", fmt.Errorf("—Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	lastHeaderCol := string(rune('A' + len(headers) - 1))
	f.SetCellStyle(sheetName, "A1", lastHeaderCol+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
	row := 2
	for _, product := range products {
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ %d: %v", product.ID, err)
			continue
		}
		if len(prices) == 0 {
			continue
		}

		firstPrice := prices[0].FinalPrice
		lastPrice := prices[len(prices)-1].FinalPrice
		minPrice, maxPrice := firstPrice, firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		priceChange := lastPrice - firstPrice
		var priceChangePercent float64
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), firstPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), lastPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange))
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), priceChangePercent)
		f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), minPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("H%d", row), maxPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("I%d", row), len(prices))
		row++
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 2,
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("H%d", row-1), numberStyle)

	// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏—Å—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
	warehouses, _ := db.GetAllWarehouses(ctx, b.db)
	err = addDynamicChangesSheet(f, products, ctx, b.db, startDate, endDate, true, config, warehouses)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Å—Ç–∞: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	filename := fmt.Sprintf("price_report_%s_%s.xlsx",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filePath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filePath); err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
	}

	return filePath, filename, nil
}

func (b *Bot) generateStockReportExcelToFile(startDate, endDate time.Time, config ReportConfig) (string, string, error) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏—Å—Ç "–°–≤–æ–¥–∫–∞"
	summarySheet := "–°–≤–æ–¥–∫–∞"
	f.SetSheetName("Sheet1", summarySheet)

	// –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–î–µ—Ç–∞–ª–∏"
	detailSheet := "–î–µ—Ç–∞–ª–∏"
	_, err = f.NewSheet(detailSheet)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–µ—Ç–∞–ª–µ–π: %v", err)
	}

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ "–°–≤–æ–¥–∫–∞"
	summaryHeaders := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", "–ö–æ–Ω–µ—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %", "–ó–∞–ø–∏—Å–µ–π",
	}
	for i, header := range summaryHeaders {
		cell := fmt.Sprintf("%c1", 'A'+i)
		f.SetCellValue(summarySheet, cell, header)
	}

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–∏—Å—Ç–∞ "–î–µ—Ç–∞–ª–∏"
	detailHeaders := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", "–ö–æ–Ω–µ—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %", "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–∫–∏", "–ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–∫–∏", "–ó–∞–ø–∏—Å–µ–π",
	}
	for i, header := range detailHeaders {
		cell := fmt.Sprintf("%c1", 'A'+i)
		f.SetCellValue(detailSheet, cell, header)
	}

	// –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, err := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: %v", err)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
	f.SetCellStyle(summarySheet, "A1", fmt.Sprintf("%c1", 'A'+len(summaryHeaders)-1), headerStyle)
	f.SetCellStyle(detailSheet, "A1", fmt.Sprintf("%c1", 'A'+len(detailHeaders)-1), headerStyle)

	// –°—á–µ—Ç—á–∏–∫–∏ —Å—Ç—Ä–æ–∫
	summaryRow := 2
	detailRow := 2

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
	for _, product := range products {
		totalInitialStock := 0
		totalFinalStock := 0
		totalRecords := 0
		hasData := false

		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ %d, —Å–∫–ª–∞–¥–∞ %d: %v", product.ID, warehouse.ID, err)
				continue
			}
			if len(stocks) == 0 {
				continue
			}

			hasData = true

			// –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
			initialStock := stocks[0].Amount
			finalStock := stocks[len(stocks)-1].Amount
			change := finalStock - initialStock

			// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
			var changePercent float64
			if initialStock != 0 {
				changePercent = (float64(change) / float64(initialStock)) * 100
			} else if change > 0 {
				changePercent = 100
			} else {
				changePercent = 0
			}

			// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
			minStock := initialStock
			maxStock := initialStock
			for _, stock := range stocks {
				if stock.Amount < minStock {
					minStock = stock.Amount
				}
				if stock.Amount > maxStock {
					maxStock = stock.Amount
				}
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –¥–ª—è —Å–≤–æ–¥–∫–∏
			totalInitialStock += initialStock
			totalFinalStock += finalStock
			totalRecords += len(stocks)

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç "–î–µ—Ç–∞–ª–∏"
			f.SetCellValue(detailSheet, fmt.Sprintf("A%d", detailRow), product.Name)
			f.SetCellValue(detailSheet, fmt.Sprintf("B%d", detailRow), product.VendorCode)
			f.SetCellValue(detailSheet, fmt.Sprintf("C%d", detailRow), warehouse.Name)
			f.SetCellValue(detailSheet, fmt.Sprintf("D%d", detailRow), initialStock)
			f.SetCellValue(detailSheet, fmt.Sprintf("E%d", detailRow), finalStock)
			f.SetCellValue(detailSheet, fmt.Sprintf("F%d", detailRow), change)
			f.SetCellValue(detailSheet, fmt.Sprintf("G%d", detailRow), changePercent)
			f.SetCellValue(detailSheet, fmt.Sprintf("H%d", detailRow), minStock)
			f.SetCellValue(detailSheet, fmt.Sprintf("I%d", detailRow), maxStock)
			f.SetCellValue(detailSheet, fmt.Sprintf("J%d", detailRow), len(stocks))
			detailRow++
		}

		if hasData {
			// –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç
			totalChange := totalFinalStock - totalInitialStock
			var totalChangePercent float64
			if totalInitialStock != 0 {
				totalChangePercent = (float64(totalChange) / float64(totalInitialStock)) * 100
			} else if totalChange > 0 {
				totalChangePercent = 100
			} else {
				totalChangePercent = 0
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç "–°–≤–æ–¥–∫–∞"
			f.SetCellValue(summarySheet, fmt.Sprintf("A%d", summaryRow), product.Name)
			f.SetCellValue(summarySheet, fmt.Sprintf("B%d", summaryRow), product.VendorCode)
			f.SetCellValue(summarySheet, fmt.Sprintf("C%d", summaryRow), totalInitialStock)
			f.SetCellValue(summarySheet, fmt.Sprintf("D%d", summaryRow), totalFinalStock)
			f.SetCellValue(summarySheet, fmt.Sprintf("E%d", summaryRow), totalChange)
			f.SetCellValue(summarySheet, fmt.Sprintf("F%d", summaryRow), totalChangePercent)
			f.SetCellValue(summarySheet, fmt.Sprintf("G%d", summaryRow), totalRecords)
			summaryRow++
		}
	}

	// –°—Ç–∏–ª–∏ –¥–ª—è —á–∏—Å–µ–ª –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	numberStyle, err := f.NewStyle(&excelize.Style{NumFmt: 0})
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–ª—è —á–∏—Å–µ–ª: %v", err)
	}
	percentStyle, err := f.NewStyle(&excelize.Style{NumFmt: 10})
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: %v", err)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ª–∏—Å—Ç—É "–°–≤–æ–¥–∫–∞"
	f.SetCellStyle(summarySheet, "C2", fmt.Sprintf("E%d", summaryRow-1), numberStyle)
	f.SetCellStyle(summarySheet, "G2", fmt.Sprintf("G%d", summaryRow-1), numberStyle)
	f.SetCellStyle(summarySheet, "F2", fmt.Sprintf("F%d", summaryRow-1), percentStyle)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ª–∏—Å—Ç—É "–î–µ—Ç–∞–ª–∏"
	f.SetCellStyle(detailSheet, "D2", fmt.Sprintf("F%d", detailRow-1), numberStyle)
	f.SetCellValue(detailSheet, "H2", fmt.Sprintf("J%d", detailRow-1))
	f.SetCellStyle(detailSheet, "G2", fmt.Sprintf("G%d", detailRow-1), percentStyle)

	err = addDynamicChangesSheet(f, products, ctx, b.db, startDate, endDate, false, config, warehouses)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ —Å –¥–∏–Ω–∞–º–∏–∫–æ–π: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("stock_report_%s_%s.xlsx", startDate.Format("02-01-2006"), endDate.Format("02-01-2006"))
	filePath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filePath); err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: %v", err)
	}

	return filePath, filename, nil
}

func (b *Bot) generatePriceReportPDFToFile(startDate, endDate time.Time, config ReportConfig) (string, string, error) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)
	}

	if len(products) == 0 {
		return "", "", fmt.Errorf("—Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç
	pdf := gopdf.GoPdf{}
	pdf.Start(gopdf.Config{PageSize: *gopdf.PageSizeA4})
	pdf.AddPage()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª—ã —à—Ä–∏—Ñ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã)
	err = pdf.AddTTFFont("arial", "fonts/arial.ttf")
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ arial: %v", err)
	}
	err = pdf.AddTTFFont("arial-bold", "fonts/arialbd.ttf")
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ arial-bold: %v", err)
	}

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
	pdf.SetFont("arial-bold", "", 16)
	title := fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s", startDate.Format("02.01.2006"), endDate.Format("02.01.2006"))
	pdf.SetX(30)
	pdf.Cell(nil, title)
	pdf.Br(20)

	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	colWidths := []float64{120, 50, 50, 50, 50, 50, 50, 50, 60}
	headerHeight := 30.0
	rowHeight := 25.0

	// –†–∏—Å—É–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã
	pdf.SetFont("arial-bold", "", 10)
	pdf.SetFillColor(221, 235, 247) // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
	x := 30.0
	y := pdf.GetY()

	for i, header := range headers {
		pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight, "FD", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 10)
		pdf.Cell(nil, header)
		x += colWidths[i]
	}

	// –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
	y += headerHeight
	pdf.SetFont("arial", "", 9)
	pdf.SetFillColor(255, 255, 255) // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –¥–∞–Ω–Ω—ã—Ö

	for _, product := range products {
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ %d: %v", product.ID, err)
			continue
		}
		if len(prices) == 0 {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		if y > 760 {
			pdf.AddPage()
			y = 30.0
			pdf.SetFont("arial-bold", "", 10)
			pdf.SetFillColor(221, 235, 247)
			x = 30.0
			for i, header := range headers {
				pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight, "FD", 0, 0)
				pdf.SetX(x + 2)
				pdf.SetY(y + 10)
				pdf.Cell(nil, header)
				x += colWidths[i]
			}
			y += headerHeight
			pdf.SetFont("arial", "", 9)
			pdf.SetFillColor(255, 255, 255)
		}

		// –†–∞—Å—á–µ—Ç —Ü–µ–Ω (–≤ –∫–æ–ø–µ–π–∫–∞—Ö –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É–±–ª–∏)
		firstPrice := float64(prices[0].FinalPrice) / 100
		lastPrice := float64(prices[len(prices)-1].FinalPrice) / 100
		minPrice := firstPrice
		maxPrice := firstPrice

		for _, price := range prices {
			p := float64(price.FinalPrice) / 100
			if p < minPrice {
				minPrice = p
			}
			if p > maxPrice {
				maxPrice = p
			}
		}

		priceChange := lastPrice - firstPrice
		var priceChangePercent float64
		if firstPrice > 0 {
			priceChangePercent = (priceChange / firstPrice) * 100
		}

		x = 30.0
		// –¢–æ–≤–∞—Ä
		pdf.Rectangle(x, y, x+colWidths[0], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		name := product.Name
		if len(name) > 25 {
			name = name[:22] + "..."
		}
		pdf.Cell(nil, name)
		x += colWidths[0]

		// –ê—Ä—Ç–∏–∫—É–ª
		pdf.Rectangle(x, y, x+colWidths[1], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, product.VendorCode)
		x += colWidths[1]

		// –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[2], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f", firstPrice))
		x += colWidths[2]

		// –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[3], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f", lastPrice))
		x += colWidths[3]

		// –ò–∑–º–µ–Ω–µ–Ω–∏–µ
		pdf.Rectangle(x, y, x+colWidths[4], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f", priceChange))
		x += colWidths[4]

		// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		pdf.Rectangle(x, y, x+colWidths[5], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f%%", priceChangePercent))
		x += colWidths[5]

		// –ú–∏–Ω. —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[6], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f", minPrice))
		x += colWidths[6]

		// –ú–∞–∫—Å. —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[7], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f", maxPrice))
		x += colWidths[7]

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
		pdf.Rectangle(x, y, x+colWidths[8], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", len(prices)))

		y += rowHeight
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	filename := fmt.Sprintf("price_report_%s_%s.pdf", startDate.Format("02-01-2006"), endDate.Format("02-01-2006"))
	filePath := filepath.Join(os.TempDir(), filename)
	err = pdf.WritePdf(filePath)
	if err != nil {
		return "", "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: %v", err)
	}

	return filePath, filename, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email
func (b *Bot) sendEmail(to string, reportType string, period string, filePath string, reportName string) error {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := 587 // –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	smtpUser := os.Getenv("SMTP_USER")
	smtpPassword := os.Getenv("SMTP_PASSWORD")

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	m := gomail.NewMessage()
	m.SetHeader("From", smtpUser)
	m.SetHeader("To", to)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	var subject string
	if reportType == "prices" {
		subject = "–û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º"
	} else {
		subject = "–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	}
	m.SetHeader("Subject", subject)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	m.SetBody("text/plain", fmt.Sprintf("–û—Ç—á–µ—Ç %s –∑–∞ –ø–µ—Ä–∏–æ–¥ %s", subject, period))

	// –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
	m.Attach(filePath, gomail.Rename(reportName))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	d := gomail.NewDialer(smtpHost, smtpPort, smtpUser, smtpPassword)
	return d.DialAndSend(m)
}

func (b *Bot) Initialize() error {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–æ–≤
	if err := b.initializeEmailStorage(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ email: %w", err)
	}

	return nil
}

// generatePriceReportPDF –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
func (b *Bot) generatePriceReportPDF(chatID int64, startDate, endDate time.Time, config ReportConfig) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
	pdf := gopdf.GoPdf{}
	pdf.Start(gopdf.Config{PageSize: *gopdf.PageSizeA4})
	pdf.AddPage()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
	err = pdf.AddTTFFont("arial", "fonts/arial.ttf")
	if err != nil {
		log.Printf("Error loading font: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç"))
		return
	}
	err = pdf.AddTTFFont("arial-bold", "fonts/arialbd.ttf")
	if err != nil {
		log.Printf("Error loading bold font: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç"))
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
	pdf.SetFont("arial-bold", "", 16)
	title := fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	pdf.Cell(nil, title)
	pdf.Br(20)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
	headerHeight := 30.0
	rowHeight := 25.0
	colWidths := []float64{120, 50, 50, 50, 50, 50, 50, 50, 60} // –®–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏

	// –†–∏—Å—É–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã
	pdf.SetFont("arial-bold", "", 10)
	pdf.SetFillColor(221, 235, 247) // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

	x := 30.0
	y := pdf.GetY()

	// –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	for i, header := range headers {
		// –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–ª–∏–≤–∫–æ–π
		pdf.SetFillColor(221, 235, 247)
		pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight, "F", 0, 0)
		// –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
		pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight, "D", 0, 0)
		pdf.SetX(x + 2)  // –û—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞
		pdf.SetY(y + 10) // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
		pdf.Cell(nil, header)
		x += colWidths[i]
	}

	// –ó–∞–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	y += headerHeight
	pdf.SetFont("arial", "", 9)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) == 0 {
			continue
		}

		// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥
		var minPrice, maxPrice, firstPrice, lastPrice int
		firstPrice = prices[0].FinalPrice
		lastPrice = prices[len(prices)-1].FinalPrice
		minPrice = firstPrice
		maxPrice = firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		if y > 760 { // –ï—Å–ª–∏ –º—ã –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			pdf.AddPage()
			y = 30 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Y –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
		x = 30.0

		// –Ø—á–µ–π–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
		pdf.Rectangle(x, y, x+colWidths[0], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		nameToDisplay := product.Name
		if len(nameToDisplay) > 25 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
			nameToDisplay = nameToDisplay[:22] + "..."
		}
		pdf.Cell(nil, nameToDisplay)
		x += colWidths[0]

		// –ê—Ä—Ç–∏–∫—É–ª
		pdf.Rectangle(x, y, x+colWidths[1], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, product.VendorCode)
		x += colWidths[1]

		// –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[2], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", firstPrice))
		x += colWidths[2]

		// –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[3], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", lastPrice))
		x += colWidths[3]

		// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
		pdf.Rectangle(x, y, x+colWidths[4], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", priceChange))
		x += colWidths[4]

		// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		pdf.Rectangle(x, y, x+colWidths[5], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%.2f%%", priceChangePercent))
		x += colWidths[5]

		// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[6], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", minPrice))
		x += colWidths[6]

		// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
		pdf.Rectangle(x, y, x+colWidths[7], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", maxPrice))
		x += colWidths[7]

		// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
		pdf.Rectangle(x, y, x+colWidths[8], y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", len(prices)))

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
		y += rowHeight
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	// –î–ª—è PDF —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ —Å–µ–∫—Ü–∏—è
	//if config.ShowDynamicChanges {}
	pdf.AddPage()
	pdf.SetFont("arial-bold", "", 14)
	pdf.Cell(nil, "–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω")
	pdf.Br(15)

	// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ç–∞–±–ª–∏—Ü–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
	pdf.SetFont("arial-bold", "", 10)
	for _, product := range products {
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil || len(prices) == 0 {
			continue
		}

		pdf.Br(10)
		pdf.Cell(nil, product.Name)
		pdf.Br(5)

		// –ó–∞–≥–æ–ª–æ–≤–∫–∏
		x = 30.0
		y = pdf.GetY()
		headers := []string{"–î–∞—Ç–∞", "–¶–µ–Ω–∞ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)"}
		colWidths := []float64{100, 80, 80}

		for i, header := range headers {
			// –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–ª–∏–≤–∫–æ–π
			pdf.SetFillColor(221, 235, 247)
			pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight*0.8, "F", 0, 0)
			// –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
			pdf.Rectangle(x, y, x+colWidths[i], y+headerHeight*0.8, "D", 0, 0)
			pdf.SetX(x + 2)
			pdf.SetY(y + 8)
			pdf.Cell(nil, header)
			x += colWidths[i]
		}

		// –î–∞–Ω–Ω—ã–µ
		y += headerHeight * 0.8
		pdf.SetFont("arial", "", 9)

		var prevPrice int
		for i, price := range prices {
			if y > 760 {
				pdf.AddPage()
				y = 30

				// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
				x = 30.0
				for j, header := range headers {
					// –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–ª–∏–≤–∫–æ–π
					pdf.SetFillColor(221, 235, 247)
					pdf.Rectangle(x, y, x+colWidths[j], y+headerHeight*0.8, "F", 0, 0)
					// –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
					pdf.Rectangle(x, y, x+colWidths[j], y+headerHeight*0.8, "D", 0, 0)
					pdf.SetX(x + 2)
					pdf.SetY(y + 8)
					pdf.Cell(nil, header)
					x += colWidths[j]
				}
				y += headerHeight * 0.8
			}

			x = 30.0

			// –î–∞—Ç–∞
			pdf.Rectangle(x, y, x+colWidths[0], y+rowHeight*0.8, "D", 0, 0)
			pdf.SetX(x + 2)
			pdf.SetY(y + 6)
			pdf.Cell(nil, price.RecordedAt.Format("02.01.2006 15:04"))
			x += colWidths[0]

			// –¶–µ–Ω–∞
			pdf.Rectangle(x, y, x+colWidths[1], y+rowHeight*0.8, "D", 0, 0)
			pdf.SetX(x + 2)
			pdf.SetY(y + 6)
			pdf.Cell(nil, fmt.Sprintf("%d", price.FinalPrice))
			x += colWidths[1]

			// –ò–∑–º–µ–Ω–µ–Ω–∏–µ
			pdf.Rectangle(x, y, x+colWidths[2], y+rowHeight*0.8, "D", 0, 0)
			pdf.SetX(x + 2)
			pdf.SetY(y + 6)

			if i > 0 {
				change := price.FinalPrice - prevPrice
				changeStr := fmt.Sprintf("%+d", change)
				pdf.Cell(nil, changeStr)
			} else {
				pdf.Cell(nil, "-")
			}

			prevPrice = price.FinalPrice
			y += rowHeight * 0.8
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("price_report_%s_%s.pdf",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)

	err = pdf.WritePdf(filepath)
	if err != nil {
		log.Printf("Error saving PDF file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üìä –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		log.Printf("Error sending PDF file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF-—Ñ–∞–π–ª–∞."))
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
}

// generateStockReportPDF –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—Å–∫–∏–º –∑–∞–ø–∞—Å–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
func (b *Bot) generateStockReportPDF(chatID int64, startDate, endDate time.Time, config ReportConfig) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Å–∫–ª–∞–¥–∞—Ö
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
	pdf := gopdf.GoPdf{}
	pdf.Start(gopdf.Config{PageSize: *gopdf.PageSizeA4Landscape}) // –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å–±–æ–º–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
	pdf.AddPage()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
	err = pdf.AddTTFFont("arial", "fonts/arial.ttf")
	if err != nil {
		log.Printf("Error loading font: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç"))
		return
	}
	err = pdf.AddTTFFont("arial-bold", "fonts/arialbd.ttf")
	if err != nil {
		log.Printf("Error loading bold font: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç"))
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
	pdf.SetFont("arial-bold", "", 16)
	title := fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—Å–∫–∏–º –∑–∞–ø–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	pdf.Cell(nil, title)
	pdf.Br(20)

	// –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
	headers := []string{"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª"}
	for _, wh := range warehouses {
		headers = append(headers, wh.Name)
	}
	headers = append(headers, "–í—Å–µ–≥–æ", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
	headerHeight := 30.0
	rowHeight := 25.0
	// –†–∞—Å—á–µ—Ç —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–ª–∞–¥–æ–≤
	baseColWidth := 40.0
	nameColWidth := 120.0
	artColWidth := 60.0

	// –†–∏—Å—É–µ–º —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã
	pdf.SetFont("arial-bold", "", 10)
	pdf.SetFillColor(221, 235, 247) // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

	x := 30.0
	y := pdf.GetY()

	// –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	for i, header := range headers {
		var colWidth float64
		if i == 0 {
			colWidth = nameColWidth
		} else if i == 1 {
			colWidth = artColWidth
		} else {
			colWidth = baseColWidth
		}

		// –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–ª–∏–≤–∫–æ–π
		pdf.SetFillColor(221, 235, 247)
		pdf.Rectangle(x, y, x+colWidth, y+headerHeight, "F", 0, 0)
		// –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
		pdf.Rectangle(x, y, x+colWidth, y+headerHeight, "D", 0, 0)
		pdf.SetX(x + 2)  // –û—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞
		pdf.SetY(y + 10) // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
		pdf.Cell(nil, header)
		x += colWidth
	}

	// –ó–∞–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	y += headerHeight
	pdf.SetFont("arial", "", 9)

	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
	type TimeSeriesData struct {
		Product    models.ProductRecord
		Warehouses map[int][]models.StockRecord // –ö–ª—é—á - ID —Å–∫–ª–∞–¥–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–ø–∏—Å–∏ –∑–∞–ø–∞—Å–æ–≤
		TotalData  []struct {
			Date     time.Time
			Quantity int
		}
	}

	// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
	timeSeriesDataList := make([]TimeSeriesData, 0)

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∫–ª–∞–¥–∞–º
	for _, product := range products {
		// –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∞—Å–∞—Ö –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º
		stockDataByWarehouse := make(map[int][]models.StockRecord)
		initialStocks := make(map[int]int)
		finalStocks := make(map[int]int)

		for _, warehouse := range warehouses {
			whId := int(warehouse.ID)
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∞—Å–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stockData, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v", product.ID, warehouse.ID, err)
				continue
			}

			if len(stockData) > 0 {
				stockDataByWarehouse[whId] = stockData

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞
				initialStocks[whId] = stockData[0].Amount
				finalStocks[whId] = stockData[len(stockData)-1].Amount
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–∏
				initialStocks[whId] = 0
				finalStocks[whId] = 0
			}
		}

		// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–∫–ª–∞–¥—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
		if len(stockDataByWarehouse) == 0 {
			continue
		}

		// –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
		var initialTotal, finalTotal int
		for _, qty := range initialStocks {
			initialTotal += qty
		}
		for _, qty := range finalStocks {
			finalTotal += qty
		}
		totalChange := finalTotal - initialTotal

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		if y > 500 { // –î–ª—è –∞–ª—å–±–æ–º–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
			pdf.AddPage()
			y = 30 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Y –≤ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

			// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
			x = 30.0
			pdf.SetFont("arial-bold", "", 10)
			for i, header := range headers {
				var colWidth float64
				if i == 0 {
					colWidth = nameColWidth
				} else if i == 1 {
					colWidth = artColWidth
				} else {
					colWidth = baseColWidth
				}

				// –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–ª–∏–≤–∫–æ–π
				pdf.SetFillColor(221, 235, 247)
				pdf.Rectangle(x, y, x+colWidth, y+headerHeight, "F", 0, 0)
				// –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
				pdf.Rectangle(x, y, x+colWidth, y+headerHeight, "D", 0, 0)
				pdf.SetX(x + 2)
				pdf.SetY(y + 10)
				pdf.Cell(nil, header)
				x += colWidth
			}

			y += headerHeight
			pdf.SetFont("arial", "", 9)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
		x = 30.0

		// –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
		pdf.Rectangle(x, y, x+nameColWidth, y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		nameToDisplay := product.Name
		if len(nameToDisplay) > 25 {
			nameToDisplay = nameToDisplay[:22] + "..."
		}
		pdf.Cell(nil, nameToDisplay)
		x += nameColWidth

		// –ê—Ä—Ç–∏–∫—É–ª
		pdf.Rectangle(x, y, x+artColWidth, y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, product.VendorCode)
		x += artColWidth

		// –î–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
		for _, wh := range warehouses {
			pdf.Rectangle(x, y, x+baseColWidth, y+rowHeight, "D", 0, 0)
			pdf.SetX(x + 2)
			pdf.SetY(y + 8)

			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
			qty := finalStocks[int(wh.ID)]
			pdf.Cell(nil, fmt.Sprintf("%d", qty))
			x += baseColWidth
		}

		// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
		pdf.Rectangle(x, y, x+baseColWidth, y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		pdf.Cell(nil, fmt.Sprintf("%d", finalTotal))
		x += baseColWidth

		// –ò–∑–º–µ–Ω–µ–Ω–∏–µ
		pdf.Rectangle(x, y, x+baseColWidth, y+rowHeight, "D", 0, 0)
		pdf.SetX(x + 2)
		pdf.SetY(y + 8)
		changeStr := fmt.Sprintf("%+d", totalChange)
		pdf.Cell(nil, changeStr)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ
		if len(stockDataByWarehouse) > 0 {
			// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
			// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –ø–æ –¥–∞—Ç–∞–º
			// –°–æ–±–µ—Ä–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
			allDates := make(map[time.Time]bool)
			for _, stockRecords := range stockDataByWarehouse {
				for _, record := range stockRecords {
					// –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –¥–Ω—è
					dateOnly := time.Date(record.RecordedAt.Year(), record.RecordedAt.Month(), record.RecordedAt.Day(), 0, 0, 0, 0, record.RecordedAt.Location())
					allDates[dateOnly] = true
				}
			}

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ä–µ–∑ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
			dates := make([]time.Time, 0, len(allDates))
			for date := range allDates {
				dates = append(dates, date)
			}

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
			sort.Slice(dates, func(i, j int) bool {
				return dates[i].Before(dates[j])
			})

			// –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã —Å–æ–±–∏—Ä–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
			totalTimeData := make([]struct {
				Date     time.Time
				Quantity int
			}, 0, len(dates))

			for _, date := range dates {
				// –î–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
				totalQty := 0
				for _, stockRecords := range stockDataByWarehouse {
					// –ò—â–µ–º –∑–∞–ø–∏—Å—å, –±–ª–∏–∂–∞–π—à—É—é –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ (–Ω–µ –ø–æ–∑–∂–µ –µ—ë)
					var latestRecord *models.StockRecord
					for i := len(stockRecords) - 1; i >= 0; i-- {
						recordDate := time.Date(stockRecords[i].RecordedAt.Year(), stockRecords[i].RecordedAt.Month(), stockRecords[i].RecordedAt.Day(), 0, 0, 0, 0, stockRecords[i].RecordedAt.Location())
						if !recordDate.After(date) {
							latestRecord = &stockRecords[i]
							break
						}
					}

					if latestRecord != nil {
						totalQty += latestRecord.Amount
					} else if len(stockRecords) > 0 {
						// –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–æ —ç—Ç–æ–π –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
						totalQty += stockRecords[0].Amount
					}
				}

				totalTimeData = append(totalTimeData, struct {
					Date     time.Time
					Quantity int
				}{Date: date, Quantity: totalQty})
			}

			timeSeriesDataList = append(timeSeriesDataList, TimeSeriesData{
				Product:    product,
				Warehouses: stockDataByWarehouse,
				TotalData:  totalTimeData,
			})
		}

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
		y += rowHeight
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	if len(timeSeriesDataList) > 0 {
		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
		pdf.AddPage()
		pdf.SetFont("arial-bold", "", 14)
		pdf.SetY(20)
		pdf.Cell(nil, "–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤")
		pdf.Br(20)

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
		y = 50
		graphHeight := 120.0
		graphWidth := 700.0

		for _, tsData := range timeSeriesDataList {
			if y > 500 {
				pdf.AddPage()
				y = 50
			}

			// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –∞—Ä—Ç–∏–∫—É–ª
			pdf.SetFont("arial-bold", "", 12)
			pdf.SetY(y)
			pdf.SetX(30)
			pdf.Cell(nil, fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–ê—Ä—Ç–∏–∫—É–ª: %s)", tsData.Product.Name, tsData.Product.VendorCode))
			y += 20

			if len(tsData.TotalData) > 1 {
				// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
				marginLeft := 50.0
				marginBottom := 30.0
				xAxisLength := graphWidth - marginLeft
				yAxisLength := graphHeight - marginBottom

				// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —à–∫–∞–ª—ã Y
				var minQty, maxQty int
				for i, data := range tsData.TotalData {
					if i == 0 || data.Quantity < minQty {
						minQty = data.Quantity
					}
					if i == 0 || data.Quantity > maxQty {
						maxQty = data.Quantity
					}
				}

				// –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
				yBuffer := int(float64(maxQty-minQty) * 0.1)
				if yBuffer < 5 {
					yBuffer = 5
				}
				minQty = max(0, minQty-yBuffer)
				maxQty = maxQty + yBuffer

				// –†–∏—Å—É–µ–º –æ—Å–∏
				pdf.SetStrokeColor(0, 0, 0) // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–µ–π

				// –û—Å—å X
				pdf.Line(30+marginLeft, y+yAxisLength, 30+marginLeft+xAxisLength, y+yAxisLength)

				// –û—Å—å Y
				pdf.Line(30+marginLeft, y, 30+marginLeft, y+yAxisLength)

				// –®–∫–∞–ª–∞ –¥–ª—è –æ—Å–∏ Y
				pdf.SetFont("arial", "", 8)
				numYTicks := 5
				for i := 0; i <= numYTicks; i++ {
					tickY := y + yAxisLength - (float64(i) * yAxisLength / float64(numYTicks))
					tickValue := minQty + (maxQty-minQty)*i/numYTicks

					// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ—Ç–∫–∏
					pdf.SetStrokeColor(200, 200, 200) // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —Å–µ—Ç–∫–∏
					pdf.Line(30+marginLeft, tickY, 30+marginLeft+xAxisLength, tickY)

					// –ü–æ–¥–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è
					pdf.SetStrokeColor(0, 0, 0) // –ß–µ—Ä–Ω—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
					pdf.SetX(20)
					pdf.SetY(tickY - 3)
					pdf.Cell(nil, fmt.Sprintf("%d", tickValue))
				}

				// –®–∫–∞–ª–∞ –¥–ª—è –æ—Å–∏ X
				numXTicks := min(len(tsData.TotalData), 10) // –ù–µ –±–æ–ª—å—à–µ 10 –¥–µ–ª–µ–Ω–∏–π
				for i := 0; i < numXTicks; i++ {
					idx := i * (len(tsData.TotalData) - 1) / (numXTicks - 1)
					if idx >= len(tsData.TotalData) {
						idx = len(tsData.TotalData) - 1
					}

					tickX := 30 + marginLeft + (float64(i) * xAxisLength / float64(numXTicks-1))

					// –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–µ—Ç–∫–∏
					pdf.SetStrokeColor(200, 200, 200) // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —Å–µ—Ç–∫–∏
					pdf.Line(tickX, y, tickX, y+yAxisLength)

					// –ü–æ–¥–ø–∏—Å—å –¥–∞—Ç—ã
					pdf.SetStrokeColor(0, 0, 0) // –ß–µ—Ä–Ω—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
					pdf.SetX(tickX - 15)
					pdf.SetY(y + yAxisLength + 5)
					pdf.Cell(nil, tsData.TotalData[idx].Date.Format("02.01"))
				}

				// –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
				pdf.SetStrokeColor(0, 0, 255) // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
				pdf.SetLineWidth(2)

				for i := 0; i < len(tsData.TotalData)-1; i++ {
					x1 := 30 + marginLeft + (float64(i) * xAxisLength / float64(len(tsData.TotalData)-1))
					y1 := y + yAxisLength - ((float64(tsData.TotalData[i].Quantity) - float64(minQty)) * yAxisLength / float64(maxQty-minQty))

					x2 := 30 + marginLeft + (float64(i+1) * xAxisLength / float64(len(tsData.TotalData)-1))
					y2 := y + yAxisLength - ((float64(tsData.TotalData[i+1].Quantity) - float64(minQty)) * yAxisLength / float64(maxQty-minQty))

					pdf.Line(x1, y1, x2, y2)
				}

				// –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
				//for i := 0; i < len(tsData.TotalData); i++ {
				//	x := 30 + marginLeft + (float64(i) * xAxisLength / float64(len(tsData.TotalData)-1))
				//	y1 := y + yAxisLength - ((float64(tsData.TotalData[i].Quantity) - float64(minQty)) * yAxisLength / float64(maxQty-minQty))
				//
				//	pdf.SetFillColor(0, 0, 255) // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è —Ç–æ—á–µ–∫
				//	pdf.Circle(x, y1, 3, "F")
				//}

				pdf.SetLineWidth(1) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É –ª–∏–Ω–∏–∏

				// –õ–µ–≥–µ–Ω–¥–∞
				pdf.SetFont("arial-bold", "", 10)
				pdf.SetY(y + yAxisLength + 20)
				pdf.SetX(30)
				pdf.Cell(nil, "–î–∞—Ç—ã: ")

				pdf.SetFont("arial", "", 8)
				for i, data := range tsData.TotalData {
					pdf.SetX(70 + float64(i*80))
					pdf.SetY(y + yAxisLength + 20)
					pdf.Cell(nil, fmt.Sprintf("%s: %d", data.Date.Format("02.01.2006"), data.Quantity))
				}

				y += graphHeight + 40 // –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
			} else {
				// –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
				pdf.SetFont("arial", "", 10)
				pdf.SetY(y)
				pdf.SetX(50)
				pdf.Cell(nil, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
				y += 30
			}

			// –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–∫–ª–∞–¥–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
			if len(tsData.Warehouses) > 1 {
				pdf.SetFont("arial-bold", "", 10)
				pdf.SetY(y)
				pdf.SetX(30)
				pdf.Cell(nil, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∫–ª–∞–¥–∞–º:")
				y += 15

				// –û—Ç–¥–µ–ª—å–Ω—ã–π –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
				miniGraphHeight := 80.0
				miniGraphWidth := 320.0
				x = 30.0

				// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
				graphCounter := 0

				for whID, stockRecords := range tsData.Warehouses {
					// –ï—Å–ª–∏ –±–æ–ª—å—à–µ 2 –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
					if graphCounter >= 2 {
						graphCounter = 0
						x = 30.0
						y += miniGraphHeight + 30
					}

					// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ 2, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
					if len(stockRecords) < 2 {
						continue
					}

					// –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
					warehouseName := fmt.Sprintf("–°–∫–ª–∞–¥ #%d", whID)
					for _, wh := range warehouses {
						if int(wh.ID) == whID {
							warehouseName = wh.Name
							break
						}
					}

					// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–∞
					pdf.SetFont("arial-bold", "", 8)
					pdf.SetY(y)
					pdf.SetX(x)
					pdf.Cell(nil, warehouseName)

					// –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
					sort.Slice(stockRecords, func(i, j int) bool {
						return stockRecords[i].RecordedAt.Before(stockRecords[j].RecordedAt)
					})

					// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
					timeData := make([]struct {
						Date     time.Time
						Quantity int
					}, 0, len(stockRecords))

					for _, record := range stockRecords {
						// –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –¥–Ω—è
						dateOnly := time.Date(record.RecordedAt.Year(), record.RecordedAt.Month(), record.RecordedAt.Day(), 0, 0, 0, 0, record.RecordedAt.Location())

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π
						foundIdx := -1
						for i, td := range timeData {
							if td.Date.Equal(dateOnly) {
								foundIdx = i
								break
							}
						}

						if foundIdx >= 0 {
							// –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
							timeData[foundIdx].Quantity = record.Amount
						} else {
							// –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
							timeData = append(timeData, struct {
								Date     time.Time
								Quantity int
							}{Date: dateOnly, Quantity: record.Amount})
						}
					}

					// –†–∏—Å—É–µ–º –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫
					marginLeft := 30.0
					marginBottom := 20.0
					xAxisLength := miniGraphWidth - marginLeft
					yAxisLength := miniGraphHeight - marginBottom

					// –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —à–∫–∞–ª—ã Y
					var minQty, maxQty int
					for i, data := range timeData {
						if i == 0 || data.Quantity < minQty {
							minQty = data.Quantity
						}
						if i == 0 || data.Quantity > maxQty {
							maxQty = data.Quantity
						}
					}

					// –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
					yBuffer := int(float64(maxQty-minQty) * 0.1)
					if yBuffer < 5 {
						yBuffer = 5
					}
					minQty = max(0, minQty-yBuffer)
					maxQty = maxQty + yBuffer

					y += 15 // –û—Ç—Å—Ç—É–ø –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞

					// –†–∏—Å—É–µ–º –æ—Å–∏
					pdf.SetStrokeColor(0, 0, 0) // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–µ–π

					// –û—Å—å X
					pdf.Line(x+marginLeft, y+yAxisLength, x+marginLeft+xAxisLength, y+yAxisLength)

					// –û—Å—å Y
					pdf.Line(x+marginLeft, y, x+marginLeft, y+yAxisLength)

					// –®–∫–∞–ª–∞ –¥–ª—è –æ—Å–∏ Y - —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
					pdf.SetFont("arial", "", 6)
					numYTicks := 3
					for i := 0; i <= numYTicks; i++ {
						tickY := y + yAxisLength - (float64(i) * yAxisLength / float64(numYTicks))
						tickValue := minQty + (maxQty-minQty)*i/numYTicks

						// –ü–æ–¥–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è
						pdf.SetX(x)
						pdf.SetY(tickY - 3)
						pdf.Cell(nil, fmt.Sprintf("%d", tickValue))
					}

					// –®–∫–∞–ª–∞ –¥–ª—è –æ—Å–∏ X - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
					if len(timeData) > 1 {
						// –ù–∞—á–∞–ª–æ
						pdf.SetX(x + marginLeft - 15)
						pdf.SetY(y + yAxisLength + 5)
						pdf.Cell(nil, timeData[0].Date.Format("02.01"))

						// –ö–æ–Ω–µ—Ü
						pdf.SetX(x + marginLeft + xAxisLength - 15)
						pdf.SetY(y + yAxisLength + 5)
						pdf.Cell(nil, timeData[len(timeData)-1].Date.Format("02.01"))
					}

					// –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
					pdf.SetStrokeColor(0, 0, 255) // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
					pdf.SetLineWidth(1)

					for i := 0; i < len(timeData)-1; i++ {
						x1 := x + marginLeft + (float64(i) * xAxisLength / float64(len(timeData)-1))
						y1 := y + yAxisLength - ((float64(timeData[i].Quantity) - float64(minQty)) * yAxisLength / float64(maxQty-minQty))

						x2 := x + marginLeft + (float64(i+1) * xAxisLength / float64(len(timeData)-1))
						y2 := y + yAxisLength - ((float64(timeData[i+1].Quantity) - float64(minQty)) * yAxisLength / float64(maxQty-minQty))

						pdf.Line(x1, y1, x2, y2)
					}

					// –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
					//for i := 0; i < len(timeData); i++ {
					//	xPoint := x + marginLeft + (float64(i) * xAxisLength / float64(len(timeData)-1))
					//	yPoint := y + yAxisLength - ((float64(timeData[i].Quantity) - float64(minQty)) * yAxisLength / float64(maxQty-minQty))
					//
					//	pdf.SetFillColor(0, 0, 255) // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è —Ç–æ—á–µ–∫
					//	pdf.Circle(xPoint, yPoint, 2, "F")
					//}

					// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥—Ä–∞—Ñ–∏–∫—É
					x += miniGraphWidth + 20
					graphCounter++
				}

				// –ü–æ—Å–ª–µ –≤—Å–µ—Ö –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫–æ–≤
				y += miniGraphHeight + 40
			}
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("stock_report_%s_%s.pdf",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)

	err = pdf.WritePdf(filepath)
	if err != nil {
		log.Printf("Error saving PDF file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –û—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—Å–∫–∏–º –∑–∞–ø–∞—Å–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		log.Printf("Error sending PDF file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF-—Ñ–∞–π–ª–∞."))
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è —á–∏—Å–ª–∞
func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
