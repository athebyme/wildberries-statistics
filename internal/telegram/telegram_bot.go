package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	"log"
	"strings"
	"time"
	"wbmonitoring/monitoring/internal/db"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
type Bot struct {
	api          *tgbotapi.BotAPI
	chatID       int64
	db           *sqlx.DB
	allowedUsers map[int64]bool // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞
func NewBot(token string, chatID int64, db *sqlx.DB, allowedUserIDs []int64) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("initializing telegram bot: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	allowedUsers := make(map[int64]bool)
	for _, userID := range allowedUserIDs {
		allowedUsers[userID] = true
	}

	return &Bot{
		api:          api,
		chatID:       chatID,
		db:           db,
		allowedUsers: allowedUsers,
	}, nil
}

// SendTelegramAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram
func (b *Bot) SendTelegramAlert(message string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	_, err := b.api.Send(msg)
	return err
}

// SendTelegramAlertWithParseMode –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (b *Bot) SendTelegramAlertWithParseMode(message, parseMode string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	msg.ParseMode = parseMode
	_, err := b.api.Send(msg)
	return err
}

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
func (b *Bot) StartBot(ctx context.Context) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			if update.Message != nil {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				if !b.allowedUsers[update.Message.From.ID] {
					log.Printf("Unauthorized access attempt from user ID: %d", update.Message.From.ID)
					b.api.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."))
					continue
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
				b.handleMessage(update.Message)
			} else if update.CallbackQuery != nil {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				if !b.allowedUsers[update.CallbackQuery.From.ID] {
					log.Printf("Unauthorized callback query from user ID: %d", update.CallbackQuery.From.ID)
					continue
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
				b.handleCallbackQuery(update.CallbackQuery)
			}
		case <-ctx.Done():
			return
		}
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch message.Command() {
	case "start":
		b.sendWelcomeMessage(message.Chat.ID)
	case "report":
		b.sendReportMenu(message.Chat.ID)
	case "help":
		b.sendHelpMessage(message.Chat.ID)
	default:
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
		if message.Text != "" {
			b.sendReportMenu(message.Chat.ID)
		}
	}
}

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) sendWelcomeMessage(chatID int64) {
	welcomeText := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wildberries!

–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ReplyMarkup = b.getMainKeyboard()
	b.api.Send(msg)
}

// sendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
func (b *Bot) sendHelpMessage(chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∏–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.`

	msg := tgbotapi.NewMessage(chatID, helpText)
	b.api.Send(msg)
}

// getMainKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
func (b *Bot) getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

// sendReportMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendReportMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:")

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º", "report_prices"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", "report_stocks"),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
	callback := tgbotapi.NewCallback(query.ID, "")
	b.api.Request(callback)

	parts := strings.Split(query.Data, "_")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	if len(parts) >= 2 && parts[0] == "report" {
		reportType := parts[1]

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
		if len(parts) == 2 {
			b.sendPeriodSelection(query.Message.Chat.ID, reportType)
			return
		}

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		if len(parts) == 3 {
			period := parts[2]
			b.generateReport(query.Message.Chat.ID, reportType, period)
			return
		}
	}
}

// sendPeriodSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendPeriodSelection(chatID int64, reportType string) {
	var msgText string
	if reportType == "prices" {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º:"
	} else {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:"
	}

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –¥–µ–Ω—å", fmt.Sprintf("report_%s_day", reportType)),
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –Ω–µ–¥–µ–ª—é", fmt.Sprintf("report_%s_week", reportType)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –º–µ—Å—è—Ü", fmt.Sprintf("report_%s_month", reportType)),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", fmt.Sprintf("report_%s_custom", reportType)),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// generateReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func (b *Bot) generateReport(chatID int64, reportType, period string) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
	statusMsg, _ := b.api.Send(tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."))

	var startDate, endDate time.Time
	now := time.Now()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
	switch period {
	case "day":
		startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		endDate = now
	case "week":
		startDate = now.AddDate(0, 0, -7)
		endDate = now
	case "month":
		startDate = now.AddDate(0, -1, 0)
		endDate = now
	case "custom":
		// –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
		b.api.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."))
		return
	default:
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."))
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	if reportType == "prices" {
		b.generatePriceReport(chatID, startDate, endDate)
	} else if reportType == "stocks" {
		b.generateStockReport(chatID, startDate, endDate)
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø."))
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, statusMsg.MessageID)
	b.api.Request(deleteMsg)
}

// generatePriceReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º
func (b *Bot) generatePriceReport(chatID int64, startDate, endDate time.Time) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := fmt.Sprintf("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s\n\n",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))

	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) == 0 {
			continue
		}

		// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥
		var minPrice, maxPrice, firstPrice, lastPrice int
		firstPrice = prices[0].FinalPrice
		lastPrice = prices[len(prices)-1].FinalPrice
		minPrice = firstPrice
		maxPrice = firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := (priceChange / firstPrice) * 100

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –æ—Ç—á–µ—Ç
		reportText += fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. %s)\n", product.Name, product.VendorCode)
		reportText += fmt.Sprintf("–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %.2f‚ÇΩ\n", firstPrice)
		reportText += fmt.Sprintf("–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: %.2f‚ÇΩ\n", lastPrice)
		reportText += fmt.Sprintf("–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %.2f‚ÇΩ (%.2f%%)\n", priceChange, priceChangePercent)
		reportText += fmt.Sprintf("–ú–∏–Ω. —Ü–µ–Ω–∞: %.2f‚ÇΩ, –ú–∞–∫—Å. —Ü–µ–Ω–∞: %.2f‚ÇΩ\n", minPrice, maxPrice)
		reportText += fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", len(prices))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	if len(reportText) > 4096 {
		// Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
		// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		for i := 0; i < len(reportText); i += 4000 {
			end := i + 4000
			if end > len(reportText) {
				end = len(reportText)
			}
			b.api.Send(tgbotapi.NewMessage(chatID, reportText[i:end]))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, reportText))
	}
}

// generateStockReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
func (b *Bot) generateStockReport(chatID int64, startDate, endDate time.Time) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := fmt.Sprintf("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s\n\n",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))

	for _, product := range products {
		totalFirstStock := 0
		totalLastStock := 0
		totalRecords := 0

		productText := fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. %s)\n", product.Name, product.VendorCode)
		hasStocks := false

		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) == 0 {
				continue
			}

			hasStocks = true
			totalRecords += len(stocks)

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			totalFirstStock += firstStock
			totalLastStock += lastStock

			// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			minStock := firstStock
			maxStock := firstStock

			for _, stock := range stocks {
				if stock.Amount < minStock {
					minStock = stock.Amount
				}
				if stock.Amount > maxStock {
					maxStock = stock.Amount
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –≤ –æ—Ç—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
			productText += fmt.Sprintf("  –°–∫–ª–∞–¥ %s:\n", warehouse.Name)
			productText += fmt.Sprintf("    –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", firstStock)
			productText += fmt.Sprintf("    –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", lastStock)
			productText += fmt.Sprintf("    –ò–∑–º–µ–Ω–µ–Ω–∏–µ: %d —à—Ç.\n", lastStock-firstStock)
			productText += fmt.Sprintf("    –ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç., –ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", minStock, maxStock)
		}

		if hasStocks {
			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–∞—Ö
			productText += fmt.Sprintf("  –û–±—â–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", totalFirstStock)
			productText += fmt.Sprintf("  –û–±—â–∏–π –∫–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", totalLastStock)
			productText += fmt.Sprintf("  –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: %d —à—Ç.\n", totalLastStock-totalFirstStock)
			productText += fmt.Sprintf("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", totalRecords)

			reportText += productText
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	if len(reportText) > 4096 {
		// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		for i := 0; i < len(reportText); i += 4000 {
			end := i + 4000
			if end > len(reportText) {
				end = len(reportText)
			}
			b.api.Send(tgbotapi.NewMessage(chatID, reportText[i:end]))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, reportText))
	}
}

// SendDailyReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
func (b *Bot) SendDailyReport(ctx context.Context) error {
	now := time.Now()
	yesterday := now.AddDate(0, 0, -1)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
	startDate := time.Date(yesterday.Year(), yesterday.Month(), yesterday.Day(), 0, 0, 0, 0, now.Location())
	endDate := time.Date(yesterday.Year(), yesterday.Month(), yesterday.Day(), 23, 59, 59, 0, now.Location())

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º
	message := fmt.Sprintf("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ %s\n\n", yesterday.Format("02.01.2006"))

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("getting products for daily report: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º
	priceChanges := 0
	for _, product := range products {
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) <= 1 {
			continue
		}

		// –ï—Å–ª–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ü–µ–Ω–µ, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
		priceChanges++
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
	stockChanges := 0
	for _, product := range products {
		warehouses, err := db.GetAllWarehouses(ctx, b.db)
		if err != nil {
			log.Printf("Error getting warehouses: %v", err)
			continue
		}

		for _, warehouse := range warehouses {
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) <= 1 {
				continue
			}

			// –ï—Å–ª–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			stockChanges++
			break
		}
	}

	message += fmt.Sprintf("–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: %d\n", len(products))
	message += fmt.Sprintf("–¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω: %d\n", priceChanges)
	message += fmt.Sprintf("–¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–æ–≤: %d\n\n", stockChanges)

	message += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç'."

	return b.SendTelegramAlert(message)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
