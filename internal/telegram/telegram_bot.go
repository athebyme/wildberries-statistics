package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	"github.com/xuri/excelize/v2" // Add this package for Excel file creation
	"log"
	"math"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
	"wbmonitoring/monitoring/internal/db"
	"wbmonitoring/monitoring/internal/models"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
type Bot struct {
	api          *tgbotapi.BotAPI
	chatID       int64
	db           *sqlx.DB
	allowedUsers map[int64]bool // –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	config       ReportConfig
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
type ReportConfig struct {
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
	MinPriceChangePercent float64 `json:"minPriceChangePercent"`
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
	MinStockChangePercent float64 `json:"minStockChangePercent"`
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ Telegram –±–æ—Ç–∞
func NewBot(token string, chatID int64, db *sqlx.DB, allowedUserIDs []int64, config ReportConfig) (*Bot, error) {
	log.Printf("allowed users %v", allowedUserIDs)
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("initializing telegram bot: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	allowedUsers := make(map[int64]bool)
	for _, userID := range allowedUserIDs {
		allowedUsers[userID] = true
	}

	return &Bot{
		api:          api,
		chatID:       chatID,
		db:           db,
		allowedUsers: allowedUsers,
		config:       config,
	}, nil
}

// SendTelegramAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram
func (b *Bot) SendTelegramAlert(message string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	_, err := b.api.Send(msg)
	return err
}

// SendTelegramAlertWithParseMode –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (b *Bot) SendTelegramAlertWithParseMode(message, parseMode string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	msg.ParseMode = parseMode
	_, err := b.api.Send(msg)
	return err
}

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
func (b *Bot) StartBot(ctx context.Context) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			if update.Message != nil {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				if !b.allowedUsers[update.Message.From.ID] {
					log.Printf("Unauthorized access attempt from user ID: %d", update.Message.From.ID)
					b.api.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."))
					continue
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
				b.handleMessage(update.Message)
			} else if update.CallbackQuery != nil {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				if !b.allowedUsers[update.CallbackQuery.From.ID] {
					log.Printf("Unauthorized callback query from user ID: %d", update.CallbackQuery.From.ID)
					continue
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
				b.handleCallbackQuery(update.CallbackQuery)
			}
		case <-ctx.Done():
			return
		}
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch message.Command() {
	case "start":
		b.sendWelcomeMessage(message.Chat.ID)
	case "report":
		b.sendReportMenu(message.Chat.ID)
	case "help":
		b.sendHelpMessage(message.Chat.ID)
	default:
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
		if message.Text != "" {
			b.sendReportMenu(message.Chat.ID)
		}
	}
}

// sendWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) sendWelcomeMessage(chatID int64) {
	welcomeText := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wildberries!

–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.`

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ReplyMarkup = b.getMainKeyboard()
	b.api.Send(msg)
}

// sendHelpMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
func (b *Bot) sendHelpMessage(chatID int64) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∏–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.

–û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –º–µ–Ω—é –æ—Ç—á–µ—Ç–∞.`

	msg := tgbotapi.NewMessage(chatID, helpText)
	b.api.Send(msg)
}

// getMainKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
func (b *Bot) getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

// sendReportMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendReportMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:")

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º", "report_prices"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º", "report_stocks"),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
	callback := tgbotapi.NewCallback(query.ID, "")
	b.api.Request(callback)

	parts := strings.Split(query.Data, "_")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	if len(parts) >= 2 && parts[0] == "report" {
		reportType := parts[1]

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
		if len(parts) == 2 {
			b.sendPeriodSelection(query.Message.Chat.ID, reportType)
			return
		}

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		if len(parts) == 3 {
			period := parts[2]
			b.sendFormatSelection(query.Message.Chat.ID, reportType, period)
			return
		}

		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á–µ—Ç—ã—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		if len(parts) == 4 {
			period := parts[2]
			format := parts[3]
			b.generateReport(query.Message.Chat.ID, reportType, period, format)
			return
		}
	}
}

// sendPeriodSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendPeriodSelection(chatID int64, reportType string) {
	var msgText string
	if reportType == "prices" {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º:"
	} else {
		msgText = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:"
	}

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –¥–µ–Ω—å", fmt.Sprintf("report_%s_day", reportType)),
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –Ω–µ–¥–µ–ª—é", fmt.Sprintf("report_%s_week", reportType)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞ –º–µ—Å—è—Ü", fmt.Sprintf("report_%s_month", reportType)),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", fmt.Sprintf("report_%s_custom", reportType)),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// sendFormatSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
func (b *Bot) sendFormatSelection(chatID int64, reportType, period string) {
	msgText := "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:"

	msg := tgbotapi.NewMessage(chatID, msgText)

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ–∫—Å—Ç–æ–≤—ã–π", fmt.Sprintf("report_%s_%s_text", reportType, period)),
			tgbotapi.NewInlineKeyboardButtonData("Excel", fmt.Sprintf("report_%s_%s_excel", reportType, period)),
		),
	)

	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// addDynamicChangesSheet –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–∏—Å—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
// —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
func addDynamicChangesSheet(
	f *excelize.File,
	products []models.ProductRecord,
	ctx context.Context,
	database *sqlx.DB,
	startDate, endDate time.Time,
	isPriceReport bool,
	config ReportConfig,
	warehouses []models.Warehouse,
) error {
	// –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
	sheetName := "–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω"
	if !isPriceReport {
		sheetName = "–î–∏–Ω–∞–º–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤"
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
	_, err := f.NewSheet(sheetName)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	var headers []string
	if isPriceReport {
		headers = []string{
			"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–î–∞—Ç–∞", "–¶–µ–Ω–∞ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
		}
	} else {
		headers = []string{
			"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–î–∞—Ç–∞", "–û—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
		}
	}

	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	productsAdded := 0

	// –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
	if isPriceReport {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã
		for _, product := range products {
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
			prices, err := db.GetPricesForPeriod(ctx, database, product.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting prices for product %d: %v", product.ID, err)
				continue
			}

			if len(prices) < 2 {
				continue // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			firstPrice := prices[0].FinalPrice
			lastPrice := prices[len(prices)-1].FinalPrice
			totalChangePercent := 0.0
			if firstPrice > 0 {
				totalChangePercent = float64(lastPrice-firstPrice) / float64(firstPrice) * 100
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			if math.Abs(totalChangePercent) < config.MinPriceChangePercent {
				continue
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
			var prevPrice int
			var firstEntryForProduct bool = true

			for i, price := range prices {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
				if i == 0 {
					prevPrice = price.FinalPrice
					continue
				}

				// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å—å—é
				priceChange := price.FinalPrice - prevPrice
				changePercent := 0.0
				if prevPrice > 0 {
					changePercent = float64(priceChange) / float64(prevPrice) * 100
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
				if priceChange != 0 {
					// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏ –∞—Ä—Ç–∏–∫—É–ª
					if firstEntryForProduct {
						f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
						f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
						firstEntryForProduct = false
						productsAdded++
					} else {
						// –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∏ –∏–º–µ–Ω–∏ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞
						f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), "")
						f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), "")
					}

					f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), price.RecordedAt.Format("02.01.2006 15:04"))
					f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), float64(price.FinalPrice)/100)
					f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange)/100)
					f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), changePercent)

					row++
				}

				prevPrice = price.FinalPrice
			}
		}
	} else {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
		for _, product := range products {
			for _, warehouse := range warehouses {
				// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤
				stocks, err := db.GetStocksForPeriod(ctx, database, product.ID, warehouse.ID, startDate, endDate)
				if err != nil {
					log.Printf("Error getting stocks for product %d on warehouse %d: %v",
						product.ID, warehouse.ID, err)
					continue
				}

				if len(stocks) < 2 {
					continue // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
				firstStock := stocks[0].Amount
				lastStock := stocks[len(stocks)-1].Amount
				totalChangePercent := 0.0
				if firstStock > 0 {
					totalChangePercent = float64(lastStock-firstStock) / float64(firstStock) * 100
				} else if firstStock == 0 && lastStock > 0 {
					// –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –±—ã–ª 0, –∞ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
					totalChangePercent = 100.0
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
				if math.Abs(totalChangePercent) < config.MinStockChangePercent {
					continue
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –æ—Ç—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏
				var prevStock int
				var firstEntryForProduct bool = true

				for i, stock := range stocks {
					// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
					if i == 0 {
						prevStock = stock.Amount
						continue
					}

					// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å—å—é
					stockChange := stock.Amount - prevStock
					changePercent := 0.0
					if prevStock > 0 {
						changePercent = float64(stockChange) / float64(prevStock) * 100
					} else if prevStock == 0 && stock.Amount > 0 {
						changePercent = 100.0
					}

					// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
					if stockChange != 0 {
						// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∏ –∞—Ä—Ç–∏–∫—É–ª
						if firstEntryForProduct {
							f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
							f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
							f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), warehouse.Name)
							firstEntryForProduct = false
							productsAdded++
						} else {
							// –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏ —è—á–µ–π–∫–∏ –∏–º–µ–Ω–∏ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞
							f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), "")
							f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), "")
							f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), "")
						}

						f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), stock.RecordedAt.Format("02.01.2006 15:04"))
						f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), stock.Amount)
						f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), stockChange)
						f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), changePercent)

						row++
					}

					prevStock = stock.Amount
				}
			}
		}
	}

	// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
	if productsAdded == 0 {
		emptyRow := 3
		if isPriceReport {
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", emptyRow),
				fmt.Sprintf("–¢–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –±–æ–ª–µ–µ %.1f%% –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", config.MinPriceChangePercent))
		} else {
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", emptyRow),
				fmt.Sprintf("–¢–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–∞ –±–æ–ª–µ–µ %.1f%% –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", config.MinStockChangePercent))
		}
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	if isPriceReport {
		// –°—Ç–∏–ª—å –¥–ª—è —Ü–µ–Ω —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
		numberStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 2, // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
		})
		f.SetCellStyle(sheetName, "D2", fmt.Sprintf("E%d", row-1), numberStyle)

		// –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
		percentStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		})
		f.SetCellStyle(sheetName, "F2", fmt.Sprintf("F%d", row-1), percentStyle)
	} else {
		// –°—Ç–∏–ª—å –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
		numberStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
		})
		f.SetCellStyle(sheetName, "E2", fmt.Sprintf("F%d", row-1), numberStyle)

		// –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
		percentStyle, _ := f.NewStyle(&excelize.Style{
			NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		})
		f.SetCellStyle(sheetName, "G2", fmt.Sprintf("G%d", row-1), percentStyle)
	}

	// –î–æ–±–∞–≤–∏–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ)
	currentProduct := ""
	for r := 2; r < row; r++ {
		productName, _ := f.GetCellValue(sheetName, fmt.Sprintf("A%d", r))
		if productName != "" {
			// –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –Ω–µ –ø—É—Å—Ç–æ–π
			if currentProduct != "" && currentProduct != productName {
				// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–Ω–∫–∏–π —Å—Ç–∏–ª—å –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
				borderStyle, _ := f.NewStyle(&excelize.Style{
					Border: []excelize.Border{
						{Type: "bottom", Color: "#CCCCCC", Style: 1},
					},
				})
				lastCol := string(rune('A' + len(headers) - 1))
				f.SetCellStyle(sheetName, "A"+strconv.Itoa(r-1), lastCol+strconv.Itoa(r-1), borderStyle)
			}
			currentProduct = productName

		}
	}

	return nil
}

// generateReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func (b *Bot) generateReport(chatID int64, reportType, period, format string) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
	statusMsg, _ := b.api.Send(tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."))

	var startDate, endDate time.Time
	now := time.Now()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
	switch period {
	case "day":
		startDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
		endDate = now
	case "week":
		startDate = now.AddDate(0, 0, -7)
		endDate = now
	case "month":
		startDate = now.AddDate(0, -1, 0)
		endDate = now
	case "custom":
		// –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
		b.api.Send(tgbotapi.NewMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."))
		return
	default:
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥."))
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
	if reportType == "prices" {
		if format == "text" {
			b.generatePriceReport(chatID, startDate, endDate)
		} else if format == "excel" {
			b.generatePriceReportExcel(chatID, startDate, endDate, b.config)
		} else {
			b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."))
		}
	} else if reportType == "stocks" {
		if format == "text" {
			b.generateStockReport(chatID, startDate, endDate)
		} else if format == "excel" {
			b.generateStockReportExcel(chatID, startDate, endDate, b.config)
		} else {
			b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø."))
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, statusMsg.MessageID)
	b.api.Request(deleteMsg)
}

// generatePriceReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (b *Bot) generatePriceReport(chatID int64, startDate, endDate time.Time) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := fmt.Sprintf("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s\n\n",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))

	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) == 0 {
			continue
		}

		// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥
		var minPrice, maxPrice, firstPrice, lastPrice int
		firstPrice = prices[0].FinalPrice
		lastPrice = prices[len(prices)-1].FinalPrice
		minPrice = firstPrice
		maxPrice = firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –æ—Ç—á–µ—Ç
		reportText += fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. %s)\n", product.Name, product.VendorCode)
		reportText += fmt.Sprintf("–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: %d‚ÇΩ\n", firstPrice)
		reportText += fmt.Sprintf("–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: %d‚ÇΩ\n", lastPrice)
		reportText += fmt.Sprintf("–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %d‚ÇΩ (%.2f%%)\n", priceChange, priceChangePercent)
		reportText += fmt.Sprintf("–ú–∏–Ω. —Ü–µ–Ω–∞: %d‚ÇΩ, –ú–∞–∫—Å. —Ü–µ–Ω–∞: %d‚ÇΩ\n", minPrice, maxPrice)
		reportText += fmt.Sprintf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", len(prices))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	if len(reportText) > 4096 {
		// Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
		// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		for i := 0; i < len(reportText); i += 4000 {
			end := i + 4000
			if end > len(reportText) {
				end = len(reportText)
			}
			b.api.Send(tgbotapi.NewMessage(chatID, reportText[i:end]))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, reportText))
	}
}

// generatePriceReportExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
func (b *Bot) generatePriceReportExcel(chatID int64, startDate, endDate time.Time, config ReportConfig) {
	ctx := context.Background()

	// –ö–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∫–∞–∫ –±—ã–ª —Ä–∞–Ω—å—à–µ, –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (‚ÇΩ)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) == 0 {
			continue
		}

		// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –ø–µ—Ä–∏–æ–¥
		var minPrice, maxPrice, firstPrice, lastPrice int
		firstPrice = prices[0].FinalPrice
		lastPrice = prices[len(prices)-1].FinalPrice
		minPrice = firstPrice
		maxPrice = firstPrice

		for _, price := range prices {
			if price.FinalPrice < minPrice {
				minPrice = price.FinalPrice
			}
			if price.FinalPrice > maxPrice {
				maxPrice = price.FinalPrice
			}
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
		f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), firstPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), lastPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange))
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), priceChangePercent)
		f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), minPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("H%d", row), maxPrice)
		f.SetCellValue(sheetName, fmt.Sprintf("I%d", row), len(prices))

		row++
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 2, // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("H%d", row-1), numberStyle)

	warehouses, _ := db.GetAllWarehouses(ctx, b.db) // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
	err = addDynamicChangesSheet(f, products, ctx, b.db, startDate, endDate, true, config, warehouses)
	if err != nil {
		log.Printf("Error adding dynamic changes sheet: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("price_report_%s_%s.xlsx",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		log.Printf("Error saving Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üìà –û—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		log.Printf("Error sending Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel-—Ñ–∞–π–ª–∞."))
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
}

// generateStockReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func (b *Bot) generateStockReport(chatID int64, startDate, endDate time.Time) {
	ctx := context.Background()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	reportText := fmt.Sprintf("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s\n\n",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))

	for _, product := range products {
		totalFirstStock := 0
		totalLastStock := 0
		totalRecords := 0

		productText := fmt.Sprintf("–¢–æ–≤–∞—Ä: %s (–∞—Ä—Ç. %s)\n", product.Name, product.VendorCode)
		hasStocks := false

		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) == 0 {
				continue
			}

			hasStocks = true
			totalRecords += len(stocks)

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			totalFirstStock += firstStock
			totalLastStock += lastStock

			// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			minStock := firstStock
			maxStock := firstStock

			for _, stock := range stocks {
				if stock.Amount < minStock {
					minStock = stock.Amount
				}
				if stock.Amount > maxStock {
					maxStock = stock.Amount
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –≤ –æ—Ç—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
			productText += fmt.Sprintf("  –°–∫–ª–∞–¥ %s:\n", warehouse.Name)
			productText += fmt.Sprintf("    –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", firstStock)
			productText += fmt.Sprintf("    –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", lastStock)
			productText += fmt.Sprintf("    –ò–∑–º–µ–Ω–µ–Ω–∏–µ: %d —à—Ç.\n", lastStock-firstStock)
			productText += fmt.Sprintf("    –ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç., –ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", minStock, maxStock)
		}

		if hasStocks {
			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–∞—Ö
			productText += fmt.Sprintf("  –û–±—â–∏–π –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", totalFirstStock)
			productText += fmt.Sprintf("  –û–±—â–∏–π –∫–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.\n", totalLastStock)
			productText += fmt.Sprintf("  –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: %d —à—Ç.\n", totalLastStock-totalFirstStock)
			productText += fmt.Sprintf("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %d\n\n", totalRecords)

			reportText += productText
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
	if len(reportText) > 4096 {
		// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		for i := 0; i < len(reportText); i += 4000 {
			end := i + 4000
			if end > len(reportText) {
				end = len(reportText)
			}
			b.api.Send(tgbotapi.NewMessage(chatID, reportText[i:end]))
		}
	} else {
		b.api.Send(tgbotapi.NewMessage(chatID, reportText))
	}
}

// generateStockReportExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
func (b *Bot) generateStockReportExcel(chatID int64, startDate, endDate time.Time, config ReportConfig) {
	ctx := context.Background()

	// –ö–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∫–∞–∫ –±—ã–ª —Ä–∞–Ω—å—à–µ, –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %v", err)))
		return
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		b.api.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: %v", err)))
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
	detailSheetName := "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º"
	index, err := f.NewSheet(detailSheetName)
	if err != nil {
		log.Printf("Error creating detail sheet: %v", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	detailHeaders := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)", "–ú–∏–Ω. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ú–∞–∫—Å. –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π",
	}
	for i, header := range detailHeaders {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(detailSheetName, cell, header)
	}
	f.SetCellStyle(detailSheetName, "A1", string(rune('A'+len(detailHeaders)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	detailRow := 2

	for _, product := range products {
		totalFirstStock := 0
		totalLastStock := 0
		totalMinStock := 0
		totalMaxStock := 0
		totalRecords := 0
		hasStocks := false

		// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É
		warehouseData := []struct {
			warehouseName string
			firstStock    int
			lastStock     int
			minStock      int
			maxStock      int
			records       int
		}{}

		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) == 0 {
				continue
			}

			hasStocks = true

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			minStock := firstStock
			maxStock := firstStock

			for _, stock := range stocks {
				if stock.Amount < minStock {
					minStock = stock.Amount
				}
				if stock.Amount > maxStock {
					maxStock = stock.Amount
				}
			}

			// –°—É–º–º–∏—Ä—É–µ–º –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
			totalFirstStock += firstStock
			totalLastStock += lastStock
			if totalMinStock == 0 || minStock < totalMinStock {
				totalMinStock = minStock
			}
			if maxStock > totalMaxStock {
				totalMaxStock = maxStock
			}
			totalRecords += len(stocks)

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
			f.SetCellValue(detailSheetName, fmt.Sprintf("A%d", detailRow), product.Name)
			f.SetCellValue(detailSheetName, fmt.Sprintf("B%d", detailRow), product.VendorCode)
			f.SetCellValue(detailSheetName, fmt.Sprintf("C%d", detailRow), warehouse.Name)
			f.SetCellValue(detailSheetName, fmt.Sprintf("D%d", detailRow), firstStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("E%d", detailRow), lastStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("F%d", detailRow), lastStock-firstStock)

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
			changePercent := float64(0)
			if firstStock > 0 {
				changePercent = float64(lastStock-firstStock) / float64(firstStock) * 100
			}
			f.SetCellValue(detailSheetName, fmt.Sprintf("G%d", detailRow), changePercent)

			f.SetCellValue(detailSheetName, fmt.Sprintf("H%d", detailRow), minStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("I%d", detailRow), maxStock)
			f.SetCellValue(detailSheetName, fmt.Sprintf("J%d", detailRow), len(stocks))

			detailRow++

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
			warehouseData = append(warehouseData, struct {
				warehouseName string
				firstStock    int
				lastStock     int
				minStock      int
				maxStock      int
				records       int
			}{
				warehouseName: warehouse.Name,
				firstStock:    firstStock,
				lastStock:     lastStock,
				minStock:      minStock,
				maxStock:      maxStock,
				records:       len(stocks),
			})
		}

		if hasStocks {
			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—É–º–º–∞—Ä–Ω—ã–π –ª–∏—Å—Ç
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), totalFirstStock)
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), totalLastStock)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), totalLastStock-totalFirstStock)

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
			changePercent := float64(0)
			if totalFirstStock > 0 {
				changePercent = float64(totalLastStock-totalFirstStock) / float64(totalFirstStock) * 100
			}
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), changePercent)

			f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), totalMinStock)
			f.SetCellValue(sheetName, fmt.Sprintf("H%d", row), totalMaxStock)
			f.SetCellValue(sheetName, fmt.Sprintf("I%d", row), totalRecords)

			row++
		}
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	for i := range detailHeaders {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(detailSheetName, col)
		if width < 15 {
			f.SetColWidth(detailSheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("E%d", row-1), numberStyle)
	f.SetCellStyle(sheetName, "G2", fmt.Sprintf("I%d", row-1), numberStyle)
	f.SetCellStyle(detailSheetName, "D2", fmt.Sprintf("F%d", detailRow-1), numberStyle)
	f.SetCellStyle(detailSheetName, "H2", fmt.Sprintf("J%d", detailRow-1), numberStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	})
	f.SetCellStyle(sheetName, "F2", fmt.Sprintf("F%d", row-1), percentStyle)
	f.SetCellStyle(detailSheetName, "G2", fmt.Sprintf("G%d", detailRow-1), percentStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
	f.SetActiveSheet(index)

	// –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –¥–∏–Ω–∞–º–∏–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
	err = addDynamicChangesSheet(f, products, ctx, b.db, startDate, endDate, false, config, warehouses)
	if err != nil {
		log.Printf("Error adding dynamic changes sheet: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("stock_report_%s_%s.xlsx",
		startDate.Format("02-01-2006"),
		endDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		log.Printf("Error saving Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞."))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ %s - %s",
		startDate.Format("02.01.2006"),
		endDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		log.Printf("Error sending Excel file: %v", err)
		b.api.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel-—Ñ–∞–π–ª–∞."))
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
}

// SendDailyReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –∏ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ —á–∞—Ç
func (b *Bot) SendDailyReport(ctx context.Context) error {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞: —Å–µ–≥–æ–¥–Ω—è —Å 00:00 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
	now := time.Now()
	startDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
	endDate := now

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
	statusMsg, err := b.api.Send(tgbotapi.NewMessage(b.chatID, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."))
	if err != nil {
		return fmt.Errorf("error sending status message: %w", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º –≤ Excel
	errPrice := b.generateDailyPriceReport(ctx, startDate, endDate)
	if errPrice != nil {
		log.Printf("Error generating daily price report: %v", errPrice)
		b.api.Send(tgbotapi.NewMessage(b.chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ü–µ–Ω–∞–º: %v", errPrice)))
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –≤ Excel
	errStock := b.generateDailyStockReport(ctx, startDate, endDate)
	if errStock != nil {
		log.Printf("Error generating daily stock report: %v", errStock)
		b.api.Send(tgbotapi.NewMessage(b.chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º: %v", errStock)))
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(b.chatID, statusMsg.MessageID)
	b.api.Request(deleteMsg)

	// –ï—Å–ª–∏ –æ–±–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
	if errPrice != nil && errStock != nil {
		return fmt.Errorf("failed to generate daily reports: price: %v, stock: %v", errPrice, errStock)
	}

	return nil
}

// generateDailyPriceReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º
func (b *Bot) generateDailyPriceReport(ctx context.Context, startDate, endDate time.Time) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω–∏–≤—à–µ–π—Å—è —Ü–µ–Ω–æ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting products: %w", err)
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–Ω–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (‚ÇΩ)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	productsAdded := 0

	for _, product := range products {
		// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		prices, err := db.GetPricesForPeriod(ctx, b.db, product.ID, startDate, endDate)
		if err != nil {
			log.Printf("Error getting prices for product %d: %v", product.ID, err)
			continue
		}

		if len(prices) <= 1 {
			// –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
			continue
		}

		// –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
		firstPrice := prices[0].FinalPrice
		lastPrice := prices[len(prices)-1].FinalPrice

		// –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
		if firstPrice == lastPrice {
			continue
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
		priceChange := lastPrice - firstPrice
		priceChangePercent := float64(0)
		if firstPrice > 0 {
			priceChangePercent = float64(priceChange) / float64(firstPrice) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
		f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), float64(firstPrice)/100)
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), float64(lastPrice)/100)
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), float64(priceChange)/100)
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), priceChangePercent)

		row++
		productsAdded++
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ü–µ–Ω–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
	if productsAdded == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ü–µ–Ω–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."))
		return nil
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 2, // –§–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
	})
	f.SetCellStyle(sheetName, "C2", fmt.Sprintf("E%d", row-1), numberStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	})
	f.SetCellStyle(sheetName, "F2", fmt.Sprintf("F%d", row-1), percentStyle)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("daily_price_report_%s.xlsx", startDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		return fmt.Errorf("error saving Excel file: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Ü–µ–Ω –∑–∞ %s",
		startDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		return fmt.Errorf("error sending Excel file: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
	return nil
}

// generateDailyStockReport –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
func (b *Bot) generateDailyStockReport(ctx context.Context, startDate, endDate time.Time) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
	products, err := db.GetAllProducts(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting products: %w", err)
	}

	if len(products) == 0 {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."))
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
	warehouses, err := db.GetAllWarehouses(ctx, b.db)
	if err != nil {
		return fmt.Errorf("error getting warehouses: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª
	f := excelize.NewFile()
	sheetName := "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"
	f.SetSheetName("Sheet1", sheetName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{
		"–¢–æ–≤–∞—Ä", "–ê—Ä—Ç–∏–∫—É–ª", "–°–∫–ª–∞–¥", "–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)", "–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç.)",
		"–ò–∑–º–µ–Ω–µ–Ω–∏–µ (—à—Ç.)", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)",
	}
	for i, header := range headers {
		cell := fmt.Sprintf("%c%d", 'A'+i, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
	headerStyle, _ := f.NewStyle(&excelize.Style{
		Font:      &excelize.Font{Bold: true},
		Fill:      excelize.Fill{Type: "pattern", Color: []string{"#DDEBF7"}, Pattern: 1},
		Alignment: &excelize.Alignment{Horizontal: "center"},
		Border: []excelize.Border{
			{Type: "top", Color: "#000000", Style: 1},
			{Type: "left", Color: "#000000", Style: 1},
			{Type: "right", Color: "#000000", Style: 1},
			{Type: "bottom", Color: "#000000", Style: 1},
		},
	})
	f.SetCellStyle(sheetName, "A1", string(rune('A'+len(headers)-1))+"1", headerStyle)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	row := 2
	changesFound := false

	for _, product := range products {
		for _, warehouse := range warehouses {
			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stocks, err := db.GetStocksForPeriod(ctx, b.db, product.ID, warehouse.ID, startDate, endDate)
			if err != nil {
				log.Printf("Error getting stocks for product %d on warehouse %d: %v",
					product.ID, warehouse.ID, err)
				continue
			}

			if len(stocks) <= 1 {
				// –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ
				continue
			}

			// –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
			firstStock := stocks[0].Amount
			lastStock := stocks[len(stocks)-1].Amount

			// –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
			if firstStock == lastStock {
				continue
			}

			changesFound = true

			// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
			stockChange := lastStock - firstStock
			stockChangePercent := float64(0)
			if firstStock > 0 {
				stockChangePercent = float64(stockChange) / float64(firstStock) * 100
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
			f.SetCellValue(sheetName, fmt.Sprintf("A%d", row), product.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("B%d", row), product.VendorCode)
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", row), warehouse.Name)
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", row), firstStock)
			f.SetCellValue(sheetName, fmt.Sprintf("E%d", row), lastStock)
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", row), stockChange)
			f.SetCellValue(sheetName, fmt.Sprintf("G%d", row), stockChangePercent)

			row++
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
	if !changesFound {
		b.api.Send(tgbotapi.NewMessage(b.chatID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."))
		return nil
	}

	// –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
	for i := range headers {
		col := string(rune('A' + i))
		width, _ := f.GetColWidth(sheetName, col)
		if width < 15 {
			f.SetColWidth(sheetName, col, col, 15)
		}
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —á–∏—Å–µ–ª
	numberStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 1, // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
	})
	f.SetCellStyle(sheetName, "D2", fmt.Sprintf("F%d", row-1), numberStyle)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
	percentStyle, _ := f.NewStyle(&excelize.Style{
		NumFmt: 10, // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	})
	f.SetCellStyle(sheetName, "G2", fmt.Sprintf("G%d", row-1), percentStyle)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("daily_stock_report_%s.xlsx", startDate.Format("02-01-2006"))
	filepath := filepath.Join(os.TempDir(), filename)
	if err := f.SaveAs(filepath); err != nil {
		return fmt.Errorf("error saving Excel file: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
	doc := tgbotapi.NewDocument(b.chatID, tgbotapi.FilePath(filepath))
	doc.Caption = fmt.Sprintf("üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ %s",
		startDate.Format("02.01.2006"))
	_, err = b.api.Send(doc)
	if err != nil {
		return fmt.Errorf("error sending Excel file: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	os.Remove(filepath)
	return nil
}
